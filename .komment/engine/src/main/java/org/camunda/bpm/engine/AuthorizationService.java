{"name":"AuthorizationService.java","path":"engine/src/main/java/org/camunda/bpm/engine/AuthorizationService.java","content":{"structured":{"description":"a class called `AuthorizationService` that provides methods for managing and checking authorizations. It includes several methods for creating new authorizations, saving existing ones, deleting them, querying for existing ones, and checking if a user has permissions to interact with a resource. The code uses packages such as `org.activiti`, `org.flowable`, and `com.google.common.base`. The class provides functionality for managing and querying authorizations in an enterprise process engine.","items":[{"id":"9153179f-79df-83ad-3c4a-a22f38734dc9","ancestors":[],"type":"function","description":"provides methods for creating new authorization objects, saving them, deleting them, querying for authorizations, and performing authorization checks on users and resources.","name":"AuthorizationService","code":"public interface AuthorizationService {\n  \n  // Authorization CRUD //////////////////////////////////////\n  \n  /** \n   * <p>Returns a new (transient) {@link Authorization} object. The Object is not \n   * yet persistent and must be saved using the {@link #saveAuthorization(Authorization)}\n   * method.</p>\n   *   \n   * @param authorizationType the type of the authorization. Legal values: {@link Authorization#AUTH_TYPE_GLOBAL}, \n   * {@link Authorization#AUTH_TYPE_GRANT}, {@link Authorization#AUTH_TYPE_REVOKE}\n   * @return an non-persistent Authorization object.\n   * @throws AuthorizationException if the user has no {@link Permissions#CREATE} permissions on {@link Resources#AUTHORIZATION}.\n   */\n  public Authorization createNewAuthorization(int authorizationType);\n  \n  /**\n   * Allows saving an {@link Authorization} object. Use this method for persisting new \n   * transient {@link Authorization} objects obtained through {@link #createNewAuthorization(int)} or\n   * for updating persistent objects.\n   *  \n   * @param authorization a Authorization object. \n   * @return the authorization object.\n   * @throws ProcessEngineException in case an internal error occurs\n   * @throws AuthorizationException if the user has no \n   *          {@link Permissions#CREATE} permissions (in case of persisting a transient object) or no \n   *          {@link Permissions#UPDATE} permissions (in case of updating a persistent object) \n   *          on {@link Resources#AUTHORIZATION}\n   */\n  public Authorization saveAuthorization(Authorization authorization);\n  \n  /**\n   * Allows deleting a persistent {@link Authorization} object.\n   *  \n   * @param authorizationId the id of the Authorization object to delete. \n   * @throws ProcessEngineException if no such authorization exists or if an internal error occurs.\n   * @throws AuthorizationException if the user has no {@link Permissions#DELETE} permissions on {@link Resources#AUTHORIZATION}.\n   */\n  public void deleteAuthorization(String authorizationId);\n  \n  /**\n   *  Constructs an authorization query.\n   */\n  public AuthorizationQuery createAuthorizationQuery();\n  \n  // Authorization Checks ////////////////////////////////\n  \n  /** \n   * <p>Allows performing an authorization check.</p>\n   * <p>Returns true if the given user has permissions for interacting with the resource is the \n   * requested way.</p>\n   * \n   * <p>This method checks for the resource type, see {@link Authorization#ANY}</p>\n   * \n   * @param userId the id of the user for which the check is performed.\n   * @param groupIds a list of group ids the user is member of\n   * @param permission the permission(s) to check for.\n   * @param resource the resource for which the authorization is checked.\n   * @throws BadUserRequestException when {@code resource} is a\n   * {@link Resources#HISTORIC_TASK Historic Task} or {@link Resources#HISTORIC_PROCESS_INSTANCE\n   * Historic Process Instance} and historic instance permissions are disabled.\n   */\n  public boolean isUserAuthorized(String userId, List<String> groupIds, Permission permission, Resource resource);\n  \n  /** \n   * <p>Allows performing an authorization check.</p>\n   * <p>Returns true if the given user has permissions for interacting with the resource is the \n   * requested way.</p>\n   *   \n   * @param userId the id of the user for which the check is performed.\n   * @param groupIds a list of group ids the user is member of\n   * @param permission the permission(s) to check for.\n   * @param resource the resource for which the authorization is checked.\n   * @param resourceId the resource id for which the authorization check is performed.\n   * @throws BadUserRequestException when {@code resource} is a\n   * {@link Resources#HISTORIC_TASK Historic Task} or {@link Resources#HISTORIC_PROCESS_INSTANCE\n   * Historic Process Instance} and historic instance permissions are disabled.\n   */\n  public boolean isUserAuthorized(String userId, List<String> groupIds, Permission permission, Resource resource, String resourceId);\n  \n}","location":{"start":71,"insert":71,"offset":" ","indent":0,"comment":{"start":28,"end":70}},"item_type":"interface","length":81}]}}}