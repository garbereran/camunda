{"name":"BusinessProcess.java","path":"engine-cdi/core/src/main/java/org/camunda/bpm/engine/cdi/BusinessProcess.java","content":{"structured":{"description":"","items":[{"id":"d5579706-9008-4a9a-876a-eb7515634357","ancestors":[],"type":"function","name":"startProcessById","location":{"offset":" ","indent":2,"insert":39,"start":39},"returns":"ProcessInstance","params":[{"name":"processDefinitionId","type":"String"}],"code":"public ProcessInstance startProcessById(String processDefinitionId) {\n    assertCommandContextNotActive();\n\n    ProcessInstance instance = processEngine.getRuntimeService().startProcessInstanceById(processDefinitionId, getAndClearCachedVariableMap());\n    if (!instance.isEnded()) {\n      setExecution(instance);\n    }\n    return instance;\n  }","skip":false,"length":9,"comment":{"description":"starts a process instance with the provided process definition ID and sets the execution variable for the started instance.","params":[{"name":"processDefinitionId","type":"String","description":"unique identifier of the process definition that is to be started."}],"returns":{"type":"ProcessInstance","description":"a `ProcessInstance` object containing information about the started process."}}},{"id":"f5702775-273b-4a9d-8d7e-9d2fdaeaa372","ancestors":[],"type":"function","name":"startProcessById","location":{"offset":" ","indent":2,"insert":49,"start":49},"returns":"ProcessInstance","params":[{"name":"processDefinitionId","type":"String"},{"name":"businessKey","type":"String"}],"code":"public ProcessInstance startProcessById(String processDefinitionId, String businessKey) {\n    assertCommandContextNotActive();\n\n    ProcessInstance instance = processEngine.getRuntimeService().startProcessInstanceById(processDefinitionId, businessKey, getAndClearCachedVariableMap());\n    if (!instance.isEnded()) {\n      setExecution(instance);\n    }\n    return instance;\n  }","skip":false,"length":9,"comment":{"description":"starts a process instance with the given ID and business key using the process engine's `startProcessInstanceById` method, sets the execution variable, and returns the started instance.","params":[{"name":"processDefinitionId","type":"String","description":"id of the process definition to start."},{"name":"businessKey","type":"String","description":"business key of the process instance to be started, which is used to identify the specific process instance to be executed by the `startProcessInstanceById` method."}],"returns":{"type":"ProcessInstance","description":"a `ProcessInstance` object representing the started process."}}},{"id":"2aa05c95-3649-4099-abaa-e39cd2124494","ancestors":[],"type":"function","name":"startProcessById","location":{"offset":" ","indent":2,"insert":59,"start":59},"returns":"ProcessInstance","params":[{"name":"processDefinitionId","type":"String"},{"name":"variables","type":"Map<String, Object>"}],"code":"public ProcessInstance startProcessById(String processDefinitionId, Map<String, Object> variables) {\n    assertCommandContextNotActive();\n\n    VariableMap cachedVariables = getAndClearCachedVariableMap();\n    cachedVariables.putAll(variables);\n    ProcessInstance instance = processEngine.getRuntimeService().startProcessInstanceById(processDefinitionId, cachedVariables);\n    if (!instance.isEnded()) {\n      setExecution(instance);\n    }\n    return instance;\n  }","skip":false,"length":11,"comment":{"description":"starts a process instance with the given ID using the process engine's `startProcessInstanceById` method. It also sets the execution of the instance if it is not already ended.","params":[{"name":"processDefinitionId","type":"String","description":"ID of the process definition to start."},{"name":"variables","type":"Map<String, Object>","description":"map of variables to be passed to the started process instance, which are then made available to the process instance through its variable scope."}],"returns":{"type":"ProcessInstance","description":"a `ProcessInstance` object containing information about the started process."}}},{"id":"99905089-ae28-4962-9b8e-5fe821af1337","ancestors":[],"type":"function","name":"startProcessById","location":{"offset":" ","indent":2,"insert":71,"start":71},"returns":"ProcessInstance","params":[{"name":"processDefinitionId","type":"String"},{"name":"businessKey","type":"String"},{"name":"variables","type":"Map<String, Object>"}],"code":"public ProcessInstance startProcessById(String processDefinitionId, String businessKey, Map<String, Object> variables) {\n    assertCommandContextNotActive();\n\n    VariableMap cachedVariables = getAndClearCachedVariableMap();\n    cachedVariables.putAll(variables);\n    ProcessInstance instance = processEngine.getRuntimeService().startProcessInstanceById(processDefinitionId, businessKey, cachedVariables);\n    if (!instance.isEnded()) {\n      setExecution(instance);\n    }\n    return instance;\n  }","skip":false,"length":11,"comment":{"description":"starts a process instance by its ID, passing variables to be used as context and setting the execution.","params":[{"name":"processDefinitionId","type":"String","description":"id of the process definition to start."},{"name":"businessKey","type":"String","description":"unique identifier of the business process that the given process definition belongs to, which is required for starting the process instance in ProcessKit."},{"name":"variables","type":"Map<String, Object>","description":"map of variables to be passed to the started process instance, which is used to update the cache of variable maps and then provided to the `startProcessInstanceById` method."}],"returns":{"type":"ProcessInstance","description":"a `ProcessInstance` object representing the started process."}}},{"id":"4095320f-786b-4c8c-8685-8941b1cec19a","ancestors":[],"type":"function","name":"startProcessByKey","location":{"offset":" ","indent":2,"insert":83,"start":83},"returns":"ProcessInstance","params":[{"name":"key","type":"String"}],"code":"public ProcessInstance startProcessByKey(String key) {\n    assertCommandContextNotActive();\n\n    ProcessInstance instance = processEngine.getRuntimeService().startProcessInstanceByKey(key, getAndClearCachedVariableMap());\n    if (!instance.isEnded()) {\n      setExecution(instance);\n    }\n    return instance;\n  }","skip":false,"length":9,"comment":{"description":"starts a process instance by its key, verifies the command context is not active, retrieves the instance from the engine, sets the execution variable if it's not ended, and returns the instance.","params":[{"name":"key","type":"String","description":"process instance key to start."}],"returns":{"type":"ProcessInstance","description":"a `ProcessInstance` object representing the started process."}}},{"id":"1b0fd7c9-1864-4427-b39b-c4c6335417ea","ancestors":[],"type":"function","name":"startProcessByKey","location":{"offset":" ","indent":2,"insert":93,"start":93},"returns":"ProcessInstance","params":[{"name":"key","type":"String"},{"name":"businessKey","type":"String"}],"code":"public ProcessInstance startProcessByKey(String key, String businessKey) {\n    assertCommandContextNotActive();\n\n    ProcessInstance instance = processEngine.getRuntimeService().startProcessInstanceByKey(key, businessKey, getAndClearCachedVariableMap());\n    if (!instance.isEnded()) {\n      setExecution(instance);\n    }\n    return instance;\n  }","skip":false,"length":9,"comment":{"description":"starts a process instance by its key and business key, checks if it is ended, and sets the execution variable to the returned instance if it is not ended.","params":[{"name":"key","type":"String","description":"unique process instance ID to start."},{"name":"businessKey","type":"String","description":"unique identifier of the business process associated with the given process instance key, which is used to retrieve the correct process instance from the process engine."}],"returns":{"type":"ProcessInstance","description":"a `ProcessInstance` object representing the started process instance."}}},{"id":"842aefab-9583-497d-b345-7cd7f63520cd","ancestors":[],"type":"function","name":"startProcessByKey","location":{"offset":" ","indent":2,"insert":103,"start":103},"returns":"ProcessInstance","params":[{"name":"key","type":"String"},{"name":"variables","type":"Map<String, Object>"}],"code":"public ProcessInstance startProcessByKey(String key, Map<String, Object> variables) {\n    assertCommandContextNotActive();\n\n    VariableMap cachedVariables = getAndClearCachedVariableMap();\n    cachedVariables.putAll(variables);\n    ProcessInstance instance = processEngine.getRuntimeService().startProcessInstanceByKey(key, cachedVariables);\n    if (!instance.isEnded()) {\n      setExecution(instance);\n    }\n    return instance;\n  }","skip":false,"length":11,"comment":{"description":"starts a process instance by key, using the given variables and checking if the instance is already ended before setting its execution status.","params":[{"name":"key","type":"String","description":"process instance key that is being activated or started."},{"name":"variables","type":"Map<String, Object>","description":"map of variable values that will be used to start the process instance."}],"returns":{"type":"ProcessInstance","description":"a `ProcessInstance` object representing the started process."}}},{"id":"506425c6-fd64-4712-ac17-37cedeb377a2","ancestors":[],"type":"function","name":"startProcessByKey","location":{"offset":" ","indent":2,"insert":115,"start":115},"returns":"ProcessInstance","params":[{"name":"key","type":"String"},{"name":"businessKey","type":"String"},{"name":"variables","type":"Map<String, Object>"}],"code":"public ProcessInstance startProcessByKey(String key, String businessKey, Map<String, Object> variables) {\n    assertCommandContextNotActive();\n\n    VariableMap cachedVariables = getAndClearCachedVariableMap();\n    cachedVariables.putAll(variables);\n    ProcessInstance instance = processEngine.getRuntimeService().startProcessInstanceByKey(key, businessKey, cachedVariables);\n    if (!instance.isEnded()) {\n      setExecution(instance);\n    }\n    return instance;\n  }","skip":false,"length":11,"comment":{"description":"starts a process instance by key, updating the variables cache and setting the execution state if necessary. It returns the started instance.","params":[{"name":"key","type":"String","description":"unique process instance key that identifies the specific process instance to be started."},{"name":"businessKey","type":"String","description":"business key of the process instance to be started, which is used to identify the process instance to be started in the process engine."},{"name":"variables","type":"Map<String, Object>","description":"map of variables to pass to the ProcessInstance when starting it by key, which can be used to initialize the process instance with additional data."}],"returns":{"type":"ProcessInstance","description":"a `ProcessInstance` object representing the started process."}}},{"id":"f873f665-7574-4b41-9fea-54185803dee8","ancestors":[],"type":"function","name":"startProcessByMessage","location":{"offset":" ","indent":2,"insert":127,"start":127},"returns":"ProcessInstance","params":[{"name":"messageName","type":"String"}],"code":"public ProcessInstance startProcessByMessage(String messageName) {\n    assertCommandContextNotActive();\n\n    VariableMap cachedVariables = getAndClearCachedVariableMap();\n    ProcessInstance instance =  processEngine.getRuntimeService().startProcessInstanceByMessage(messageName, cachedVariables);\n    if (!instance.isEnded()) {\n      setExecution(instance);\n    }\n    return instance;\n  }","skip":false,"length":10,"comment":{"description":"starts a process instance by sending a message to the process engine, using the given message name and caching any variables retrieved from the context. It then sets the execution status of the created instance to \"in progress\" or \"ended\", depending on whether it was successfully started or not.","params":[{"name":"messageName","type":"String","description":"message to be executed when starting a process instance using the `startProcessInstanceByMessage()` method of the process engine."}],"returns":{"type":"ProcessInstance","description":"a ProcessInstance object representing the started process."}}},{"id":"71b8e3b2-5db6-4587-b318-c3d40eebade2","ancestors":[],"type":"function","name":"startProcessByMessage","location":{"offset":" ","indent":2,"insert":138,"start":138},"returns":"ProcessInstance","params":[{"name":"messageName","type":"String"},{"name":"processVariables","type":"Map<String, Object>"}],"code":"public ProcessInstance startProcessByMessage(String messageName, Map<String, Object> processVariables) {\n    assertCommandContextNotActive();\n\n    VariableMap cachedVariables = getAndClearCachedVariableMap();\n    cachedVariables.putAll(processVariables);\n    ProcessInstance instance =  processEngine.getRuntimeService().startProcessInstanceByMessage(messageName, cachedVariables);\n    if (!instance.isEnded()) {\n      setExecution(instance);\n    }\n    return instance;\n  }","skip":false,"length":11,"comment":{"description":"starts a new process instance by sending a message to the process engine, using the provided message name and process variables.","params":[{"name":"messageName","type":"String","description":"name of the message to be started as a process instance."},{"name":"processVariables","type":"Map<String, Object>","description":"variable values that will be used to start a process instance when the `startProcessByMessage` function is called."}],"returns":{"type":"ProcessInstance","description":"a `ProcessInstance` object representing the started process."}}},{"id":"5df6501f-58f1-4259-b010-d770bcf379ff","ancestors":[],"type":"function","name":"startProcessByMessage","location":{"offset":" ","indent":2,"insert":150,"start":150},"returns":"ProcessInstance","params":[{"name":"messageName","type":"String"},{"name":"businessKey","type":"String"},{"name":"processVariables","type":"Map<String, Object>"}],"code":"public ProcessInstance startProcessByMessage(String messageName, String businessKey, Map<String, Object> processVariables) {\n    assertCommandContextNotActive();\n\n    VariableMap cachedVariables = getAndClearCachedVariableMap();\n    cachedVariables.putAll(processVariables);\n    ProcessInstance instance =  processEngine.getRuntimeService().startProcessInstanceByMessage(messageName, businessKey, cachedVariables);\n    if (!instance.isEnded()) {\n      setExecution(instance);\n    }\n    return instance;\n  }","skip":false,"length":11,"comment":{"description":"starts a process instance by sending a message to the process engine, passing in the name of the message, the business key, and any necessary process variables. The function retrieves the cached variable map, adds any new process variables, and then calls the `startProcessInstanceByMessage` method on the process engine to start the instance.","params":[{"name":"messageName","type":"String","description":"name of the message that will be triggered when the process is started."},{"name":"businessKey","type":"String","description":"business key of the process instance that is being started, which is used to identify the process instance within the process engine."},{"name":"processVariables","type":"Map<String, Object>","description":"map of process variables that will be used to start the process instance."}],"returns":{"type":"ProcessInstance","description":"a `ProcessInstance` object representing the started process."}}},{"id":"a514f2d2-80a7-4372-be48-7b55c08e6082","ancestors":[],"type":"function","name":"associateExecutionById","location":{"offset":" ","indent":2,"insert":163,"start":163},"returns":false,"params":[{"name":"executionId","type":"String"}],"code":"public void associateExecutionById(String executionId) {\n    Execution execution = processEngine.getRuntimeService()\n      .createExecutionQuery()\n      .executionId(executionId)\n      .singleResult();\n    if(execution == null) {\n      throw new ProcessEngineCdiException(\"Cannot associate execution by id: no execution with id '\"+executionId+\"' found.\");\n    }\n    associationManager.setExecution(execution);\n  }","skip":false,"length":10,"comment":{"description":"retrieves an execution from the process engine based on its ID, sets it as the association manager's execution, and throws a `ProcessEngineCdiException` if no matching execution is found.","params":[{"name":"executionId","type":"String","description":"unique identifier of the execution to be associated with the current execution."}],"returns":null}},{"id":"36afc547-51e5-4266-86f1-fc736e841a94","ancestors":[],"type":"function","name":"signalExecution","location":{"offset":" ","indent":2,"insert":185,"start":185},"returns":false,"params":[{"name":"endConversation","type":"boolean"}],"code":"public void signalExecution(boolean endConversation) {\n    signalExecution();\n    if(endConversation) {\n      conversationInstance.get().end();\n    }\n  }","skip":false,"length":6,"comment":{"description":"triggers the termination of a conversation instance upon receiving the signal.","params":[{"name":"endConversation","type":"boolean","description":"conclusion of the conversation, triggering the execution to end when set to `true`."}],"returns":null}},{"id":"2b52c771-b2c5-4253-83d2-0efc71e0ecb5","ancestors":[],"type":"function","name":"startTask","location":{"offset":" ","indent":2,"insert":194,"start":194},"returns":"Task","params":[{"name":"taskId","type":"String"}],"code":"public Task startTask(String taskId) {\n    Task currentTask = associationManager.getTask();\n    if(currentTask != null && currentTask.getId().equals(taskId)) {\n      return currentTask;\n    }\n    Task task = processEngine.getTaskService().createTaskQuery().taskId(taskId).singleResult();\n    if(task == null) {\n      throw new ProcessEngineCdiException(\"Cannot resume task with id '\"+taskId+\"', no such task.\");\n    }\n    associationManager.setTask(task);\n    associateExecutionById(task.getExecutionId());\n    return task;\n  }","skip":false,"length":13,"comment":{"description":"retrieves a task by ID, creates a new task if none exists with the provided ID, and associates the execution with the newly created or retrieved task.","params":[{"name":"taskId","type":"String","description":"id of the task to be resumed."}],"returns":{"type":"Task","description":"a reference to the specified task."}}},{"id":"d0d7c98a-c9b1-4fec-8602-c07ae799f1c8","ancestors":[],"type":"function","name":"startTask","location":{"offset":" ","indent":2,"insert":208,"start":208},"returns":"Task","params":[{"name":"taskId","type":"String"},{"name":"beginConversation","type":"boolean"}],"code":"public Task startTask(String taskId, boolean beginConversation) {\n    if(beginConversation) {\n      Conversation conversation = conversationInstance.get();\n      if(conversation.isTransient()) {\n       conversation.begin();\n      }\n    }\n    return startTask(taskId);\n  }","skip":false,"length":9,"comment":{"description":"starts a task identified by `taskId`. If `beginConversation` is `true`, it also begins a conversation if one is not already running.","params":[{"name":"taskId","type":"String","description":"unique identifier of the task to be started."},{"name":"beginConversation","type":"boolean","description":"begin conversation method of the Conversation instance when it is called with true value."}],"returns":{"type":"Task","description":"a task instance."}}},{"id":"e945aad0-add4-426c-9946-1b72663d4eb4","ancestors":[],"type":"function","name":"completeTask","location":{"offset":" ","indent":2,"insert":228,"start":228},"returns":false,"params":[{"name":"endConversation","type":"boolean"}],"code":"public void completeTask(boolean endConversation) {\n    completeTask();\n    if(endConversation) {\n      conversationInstance.get().end();\n    }\n  }","skip":false,"length":6,"comment":{"description":"performs a task and ends a conversation if the argument `endConversation` is true.","params":[{"name":"endConversation","type":"boolean","description":"boolean value that determines whether or not to end a conversation instance when the `completeTask()` method is called."}],"returns":null}},{"id":"ce18fac4-1bda-43a0-b385-630ebc164e21","ancestors":[],"type":"function","name":"stopTask","location":{"offset":" ","indent":2,"insert":257,"start":257},"returns":false,"params":[{"name":"endConversation","type":"boolean"}],"code":"public void stopTask(boolean endConversation) {\n    stopTask();\n    if(endConversation) {\n      conversationInstance.get().end();\n    }\n  }","skip":false,"length":6,"comment":{"description":"stops a task and ends a conversation, if requested.","params":[{"name":"endConversation","type":"boolean","description":"whether the task should end the conversation or not."}],"returns":null}},{"id":"5aa08552-71f0-4948-b083-d3179db57d84","ancestors":[],"type":"function","name":"getVariable","location":{"offset":" ","indent":2,"insert":267,"start":267},"returns":"<T>","params":[{"name":"variableName","type":"String"}],"code":"@SuppressWarnings(\"unchecked\")\n  public <T> T getVariable(String variableName) {\n    TypedValue variable = getVariableTyped(variableName);\n    if (variable != null) {\n      Object value = variable.getValue();\n      if (value != null) {\n        return (T) value;\n      }\n    }\n    return null;\n  }","skip":false,"length":11,"comment":{"description":"retrieves a variable's value of specified type from the application context, returning the value as the requested type if found, or `null` otherwise.","params":[{"name":"variableName","type":"String","description":"name of a variable to be retrieved from the application's variables cache."}],"returns":{"type":"<T>","description":"a reference of type `T` to the value stored under the specified variable name, or `null` if the variable does not exist or has no value."}}},{"id":"f6e14f38-8da7-4708-932c-2e142ba7e68a","ancestors":[],"type":"function","name":"getVariableTyped","location":{"offset":" ","indent":2,"insert":280,"start":280},"returns":"<T extends TypedValue>","params":[{"name":"variableName","type":"String"}],"code":"@SuppressWarnings(\"unchecked\")\n  public <T extends TypedValue> T getVariableTyped(String variableName) {\n    TypedValue variable = associationManager.getVariable(variableName);\n    return variable != null ? (T) (variable) : null;\n  }","skip":false,"length":5,"comment":{"description":"retrieves a `TypedValue` associated with a given `String` variable name, and returns it as a parameterized type `T`. If the variable is null, the function returns `null`.","params":[{"name":"variableName","type":"String","description":"name of the variable to be retrieved from the association manager."}],"returns":{"type":"<T extends TypedValue>","description":"a `TypedValue` object representing the specified variable, or `null` if it cannot be found."}}},{"id":"ea07697a-a1b7-463e-bec7-2b9a83048ef5","ancestors":[],"type":"function","name":"setVariable","location":{"offset":" ","indent":2,"insert":287,"start":287},"returns":false,"params":[{"name":"variableName","type":"String"},{"name":"value","type":"Object"}],"code":"public void setVariable(String variableName, Object value) {\n    associationManager.setVariable(variableName, value);\n  }","skip":false,"length":3,"comment":{"description":"sets a variable's value provided by the user.","params":[{"name":"variableName","type":"String","description":"name of a variable that the `associationManager` will set the value of."},{"name":"value","type":"Object","description":"object to be associated with the specified variable name."}],"returns":null}},{"id":"39a39243-78ab-491f-a6f8-42d63b43396b","ancestors":[],"type":"function","name":"getVariableLocal","location":{"offset":" ","indent":2,"insert":317,"start":317},"returns":"<T>","params":[{"name":"variableName","type":"String"}],"code":"@SuppressWarnings(\"unchecked\")\n  public <T> T getVariableLocal(String variableName) {\n    TypedValue variable = getVariableLocalTyped(variableName);\n    if (variable != null) {\n      Object value = variable.getValue();\n      if (value != null) {\n        return (T) value;\n      }\n    }\n    return null;\n  }","skip":false,"length":11,"comment":{"description":"retrieves a local variable's value of type `T`. If the variable is not null and its value is not null, it returns a casted instance of `T`. Otherwise, it returns `null`.","params":[{"name":"variableName","type":"String","description":"name of the variable to be retrieved as a typed value."}],"returns":{"type":"<T>","description":"a `T` object representing the value of the specified variable."}}},{"id":"ca673c2d-cefc-4227-bdd9-77c8622badda","ancestors":[],"type":"function","name":"getVariableLocalTyped","location":{"offset":" ","indent":2,"insert":330,"start":330},"returns":"<T extends TypedValue>","params":[{"name":"variableName","type":"String"}],"code":"@SuppressWarnings(\"unchecked\")\n  public <T extends TypedValue> T getVariableLocalTyped(String variableName) {\n    TypedValue variable = associationManager.getVariableLocal(variableName);\n    return variable != null ? (T) variable : null;\n  }","skip":false,"length":5,"comment":{"description":"retrieves a `TypedValue` object associated with a given `variableName`, casting it to the specified type `T` if found, otherwise returning `null`.","params":[{"name":"variableName","type":"String","description":"name of the variable to be retrieved from the association manager, which is then used to retrieve the typed value associated with that variable name."}],"returns":{"type":"<T extends TypedValue>","description":"a `TypedValue` object representing the local variable with the given name, or `null` if the variable does not exist."}}},{"id":"87d84e55-5ae3-4703-a607-6073680a0d3a","ancestors":[],"type":"function","name":"setVariableLocal","location":{"offset":" ","indent":2,"insert":337,"start":337},"returns":false,"params":[{"name":"variableName","type":"String"},{"name":"value","type":"Object"}],"code":"public void setVariableLocal(String variableName, Object value) {\n    associationManager.setVariableLocal(variableName, value);\n  }","skip":false,"length":3,"comment":{"description":"sets a variable locally within an association manager object.","params":[{"name":"variableName","type":"String","description":"name of the variable to be set locally."},{"name":"value","type":"Object","description":"local value of the variable that is being set."}],"returns":null}},{"id":"1ba4cc65-dfe4-4231-9fba-9714bf003c3e","ancestors":[],"type":"function","name":"setTask","location":{"offset":" ","indent":2,"insert":379,"start":379},"returns":false,"params":[{"name":"task","type":"Task"}],"code":"public void setTask(Task task) {\n    startTask(task.getId());\n  }","skip":false,"length":3,"comment":{"description":"starts a task with the given ID.","params":[{"name":"task","type":"Task","description":"ID of an existing task to be started when the function is called."}],"returns":null}},{"id":"7ba10f19-ae45-4219-8cde-910104a5d8e3","ancestors":[],"type":"function","name":"setTaskId","location":{"offset":" ","indent":2,"insert":384,"start":384},"returns":false,"params":[{"name":"taskId","type":"String"}],"code":"public void setTaskId(String taskId) {\n    startTask(taskId);\n  }","skip":false,"length":3,"comment":{"description":"sets the `taskId` parameter to the value passed as an argument, which then triggers the start of the task associated with that ID.","params":[{"name":"taskId","type":"String","description":"identification of a task to be executed by the `startTask()` method, which is called by the `setTaskId()` function."}],"returns":null}},{"id":"60339063-d501-4e5b-b3fb-8d130235cc89","ancestors":[],"type":"function","name":"setExecution","location":{"offset":" ","indent":2,"insert":389,"start":389},"returns":false,"params":[{"name":"execution","type":"Execution"}],"code":"public void setExecution(Execution execution) {\n    associateExecutionById(execution.getId());\n  }","skip":false,"length":3,"comment":{"description":"associates an execution with the given ID to the object instance.","params":[{"name":"execution","type":"Execution","description":"Execution object that will be associated with the current code generation task."}],"returns":null}},{"id":"facec4e2-7989-4eab-bdfb-f47928aa141f","ancestors":[],"type":"function","name":"setExecutionId","location":{"offset":" ","indent":2,"insert":394,"start":394},"returns":false,"params":[{"name":"executionId","type":"String"}],"code":"protected void setExecutionId(String executionId) {\n    associateExecutionById(executionId);\n  }","skip":false,"length":3,"comment":{"description":"associates an execution ID with a code snippet, enabling its execution history to be tracked and managed.","params":[{"name":"executionId","type":"String","description":"unique identifier for an execution and is used to associate it with the current code execution."}],"returns":null}}]}}}