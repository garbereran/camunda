{"name":"BusinessProcess.java","path":"engine-cdi/core/src/main/java/org/camunda/bpm/engine/cdi/BusinessProcess.java","content":{"structured":{"description":"","items":[{"id":"8d6f07bf-d264-4695-8574-aa4b07adba77","ancestors":[],"type":"function","name":"startProcessById","location":{"offset":" ","indent":2,"insert":39,"start":39},"returns":"ProcessInstance","params":[{"name":"processDefinitionId","type":"String"}],"code":"public ProcessInstance startProcessById(String processDefinitionId) {\n    assertCommandContextNotActive();\n\n    ProcessInstance instance = processEngine.getRuntimeService().startProcessInstanceById(processDefinitionId, getAndClearCachedVariableMap());\n    if (!instance.isEnded()) {\n      setExecution(instance);\n    }\n    return instance;\n  }","skip":false,"length":9,"comment":{"description":"starts a process instance based on a given process definition ID, retrieves the latest state from the process engine, and sets the execution variable to reference the started instance.","params":[{"name":"processDefinitionId","type":"String","description":"identifier of the process definition to start."}],"returns":{"type":"ProcessInstance","description":"a `ProcessInstance` object representing the started process."}}},{"id":"6f033533-79cd-4e4e-ac83-4aa455e1ed39","ancestors":[],"type":"function","name":"startProcessById","location":{"offset":" ","indent":2,"insert":49,"start":49},"returns":"ProcessInstance","params":[{"name":"processDefinitionId","type":"String"},{"name":"businessKey","type":"String"}],"code":"public ProcessInstance startProcessById(String processDefinitionId, String businessKey) {\n    assertCommandContextNotActive();\n\n    ProcessInstance instance = processEngine.getRuntimeService().startProcessInstanceById(processDefinitionId, businessKey, getAndClearCachedVariableMap());\n    if (!instance.isEnded()) {\n      setExecution(instance);\n    }\n    return instance;\n  }","skip":false,"length":9,"comment":{"description":"starts a process instance by its ID and business key, checks if it's already ended, and sets the execution object if not.","params":[{"name":"processDefinitionId","type":"String","description":"identity of the process definition to start."},{"name":"businessKey","type":"String","description":"business key of the process instance to be started, which is used to identify the process instance in the process engine."}],"returns":{"type":"ProcessInstance","description":"a `ProcessInstance` object containing the started process instance details."}}},{"id":"3fcb9a2a-86e3-44a2-8ecc-4ecded57583d","ancestors":[],"type":"function","name":"startProcessById","location":{"offset":" ","indent":2,"insert":59,"start":59},"returns":"ProcessInstance","params":[{"name":"processDefinitionId","type":"String"},{"name":"variables","type":"Map<String, Object>"}],"code":"public ProcessInstance startProcessById(String processDefinitionId, Map<String, Object> variables) {\n    assertCommandContextNotActive();\n\n    VariableMap cachedVariables = getAndClearCachedVariableMap();\n    cachedVariables.putAll(variables);\n    ProcessInstance instance = processEngine.getRuntimeService().startProcessInstanceById(processDefinitionId, cachedVariables);\n    if (!instance.isEnded()) {\n      setExecution(instance);\n    }\n    return instance;\n  }","skip":false,"length":11,"comment":{"description":"starts a process instance by id, updating the variables map and then calling the `startProcessInstanceById` method of the process engine to initiate the process.","params":[{"name":"processDefinitionId","type":"String","description":"ID of the process definition to start."},{"name":"variables","type":"Map<String, Object>","description":"map of variables to be passed as arguments to the started process instance, which are then made available to the process instance through the `cachedVariables` variable map."}],"returns":{"type":"ProcessInstance","description":"a `ProcessInstance` object representing the started process."}}},{"id":"3971ba69-31d7-466f-b16a-bc383cd6cb0f","ancestors":[],"type":"function","name":"startProcessById","location":{"offset":" ","indent":2,"insert":71,"start":71},"returns":"ProcessInstance","params":[{"name":"processDefinitionId","type":"String"},{"name":"businessKey","type":"String"},{"name":"variables","type":"Map<String, Object>"}],"code":"public ProcessInstance startProcessById(String processDefinitionId, String businessKey, Map<String, Object> variables) {\n    assertCommandContextNotActive();\n\n    VariableMap cachedVariables = getAndClearCachedVariableMap();\n    cachedVariables.putAll(variables);\n    ProcessInstance instance = processEngine.getRuntimeService().startProcessInstanceById(processDefinitionId, businessKey, cachedVariables);\n    if (!instance.isEnded()) {\n      setExecution(instance);\n    }\n    return instance;\n  }","skip":false,"length":11,"comment":{"description":"starts a process instance with the specified ID, business key, and variables. It retrieves the cached variables, updates them with the provided ones, and then starts the process instance using the `getRuntimeService().startProcessInstanceById()` method. If the instance is not ended, it sets the execution to the newly started instance.","params":[{"name":"processDefinitionId","type":"String","description":"identifier of the process definition to start."},{"name":"businessKey","type":"String","description":"unique identifier of the business process instance to be started, which is used by the `processEngine.getRuntimeService().startProcessInstanceById()` method to locate the correct process definition and start the instance."},{"name":"variables","type":"Map<String, Object>","description":"map of variables to be used when starting the process instance, which is added to the existing cached variables and then passed to the `startProcessInstanceById()` method."}],"returns":{"type":"ProcessInstance","description":"a `ProcessInstance` object representing the started process."}}},{"id":"7e6bd292-70e9-4bdf-8819-c2048c113063","ancestors":[],"type":"function","name":"startProcessByKey","location":{"offset":" ","indent":2,"insert":83,"start":83},"returns":"ProcessInstance","params":[{"name":"key","type":"String"}],"code":"public ProcessInstance startProcessByKey(String key) {\n    assertCommandContextNotActive();\n\n    ProcessInstance instance = processEngine.getRuntimeService().startProcessInstanceByKey(key, getAndClearCachedVariableMap());\n    if (!instance.isEnded()) {\n      setExecution(instance);\n    }\n    return instance;\n  }","skip":false,"length":9,"comment":{"description":"starts a process instance by its key in the process engine, retrieves the processed instance if it is not ended, sets the execution to the instance, and returns the instance.","params":[{"name":"key","type":"String","description":"unique identifier of the process instance to be started."}],"returns":{"type":"ProcessInstance","description":"a `ProcessInstance` object representing the started process."}}},{"id":"e88f34d8-7cf6-4f5a-b8a1-276ca461825d","ancestors":[],"type":"function","name":"startProcessByKey","location":{"offset":" ","indent":2,"insert":93,"start":93},"returns":"ProcessInstance","params":[{"name":"key","type":"String"},{"name":"businessKey","type":"String"}],"code":"public ProcessInstance startProcessByKey(String key, String businessKey) {\n    assertCommandContextNotActive();\n\n    ProcessInstance instance = processEngine.getRuntimeService().startProcessInstanceByKey(key, businessKey, getAndClearCachedVariableMap());\n    if (!instance.isEnded()) {\n      setExecution(instance);\n    }\n    return instance;\n  }","skip":false,"length":9,"comment":{"description":"starts a process instance by key and business key, checks if it is ended, sets execution to the started instance and returns it.","params":[{"name":"key","type":"String","description":"process instance key to be started."},{"name":"businessKey","type":"String","description":"business key of the process instance to be started, which is used to identify the specific process instance to be activated by the `startProcessByKey()` method."}],"returns":{"type":"ProcessInstance","description":"a `ProcessInstance` object representing the started process."}}},{"id":"8fe9f56e-1d4c-45af-9454-49cc5f08b388","ancestors":[],"type":"function","name":"startProcessByKey","location":{"offset":" ","indent":2,"insert":103,"start":103},"returns":"ProcessInstance","params":[{"name":"key","type":"String"},{"name":"variables","type":"Map<String, Object>"}],"code":"public ProcessInstance startProcessByKey(String key, Map<String, Object> variables) {\n    assertCommandContextNotActive();\n\n    VariableMap cachedVariables = getAndClearCachedVariableMap();\n    cachedVariables.putAll(variables);\n    ProcessInstance instance = processEngine.getRuntimeService().startProcessInstanceByKey(key, cachedVariables);\n    if (!instance.isEnded()) {\n      setExecution(instance);\n    }\n    return instance;\n  }","skip":false,"length":11,"comment":{"description":"starts a process instance by its key and passes variables to it. It first checks if the command context is active, then gets and clears the cached variable map, puts all the given variables into it, starts the process instance using the `startProcessInstanceByKey` method of the process engine, and sets the execution of the instance if it's not ended.","params":[{"name":"key","type":"String","description":"identifier of the process instance to start."},{"name":"variables","type":"Map<String, Object>","description":"map of variables to be passed to the started process instance, which is stored in the `cachedVariables` map and used to initialize the process instance."}],"returns":{"type":"ProcessInstance","description":"a `ProcessInstance` object representing the started process."}}},{"id":"60f7d644-0a34-4716-9fff-2d89b9c6f9f7","ancestors":[],"type":"function","name":"startProcessByKey","location":{"offset":" ","indent":2,"insert":115,"start":115},"returns":"ProcessInstance","params":[{"name":"key","type":"String"},{"name":"businessKey","type":"String"},{"name":"variables","type":"Map<String, Object>"}],"code":"public ProcessInstance startProcessByKey(String key, String businessKey, Map<String, Object> variables) {\n    assertCommandContextNotActive();\n\n    VariableMap cachedVariables = getAndClearCachedVariableMap();\n    cachedVariables.putAll(variables);\n    ProcessInstance instance = processEngine.getRuntimeService().startProcessInstanceByKey(key, businessKey, cachedVariables);\n    if (!instance.isEnded()) {\n      setExecution(instance);\n    }\n    return instance;\n  }","skip":false,"length":11,"comment":{"description":"starts a process instance based on its key and associated business key, and passes variables to the start process command.","params":[{"name":"key","type":"String","description":"unique process instance key to be started."},{"name":"businessKey","type":"String","description":"business key of the process instance to be started, which is used by the `startProcessInstanceByKey` method to identify the correct process instance to start."},{"name":"variables","type":"Map<String, Object>","description":"map of variables to be used when starting a process instance by its key, and it is passed to the `processEngine.getRuntimeService().startProcessInstanceByKey()` method for injection into the process instance."}],"returns":{"type":"ProcessInstance","description":"a `ProcessInstance` object representing the started process."}}},{"id":"a2c96c12-7d59-4415-a83b-d43d07236e93","ancestors":[],"type":"function","name":"startProcessByMessage","location":{"offset":" ","indent":2,"insert":127,"start":127},"returns":"ProcessInstance","params":[{"name":"messageName","type":"String"}],"code":"public ProcessInstance startProcessByMessage(String messageName) {\n    assertCommandContextNotActive();\n\n    VariableMap cachedVariables = getAndClearCachedVariableMap();\n    ProcessInstance instance =  processEngine.getRuntimeService().startProcessInstanceByMessage(messageName, cachedVariables);\n    if (!instance.isEnded()) {\n      setExecution(instance);\n    }\n    return instance;\n  }","skip":false,"length":10,"comment":{"description":"starts a process instance by sending a message to the process engine, retrieves the created instance, and sets its execution status.","params":[{"name":"messageName","type":"String","description":"name of the message to start the process instance with."}],"returns":{"type":"ProcessInstance","description":"a `ProcessInstance` object representing the started process."}}},{"id":"e262493c-892a-4f4d-bab7-fdb9612369f2","ancestors":[],"type":"function","name":"startProcessByMessage","location":{"offset":" ","indent":2,"insert":138,"start":138},"returns":"ProcessInstance","params":[{"name":"messageName","type":"String"},{"name":"processVariables","type":"Map<String, Object>"}],"code":"public ProcessInstance startProcessByMessage(String messageName, Map<String, Object> processVariables) {\n    assertCommandContextNotActive();\n\n    VariableMap cachedVariables = getAndClearCachedVariableMap();\n    cachedVariables.putAll(processVariables);\n    ProcessInstance instance =  processEngine.getRuntimeService().startProcessInstanceByMessage(messageName, cachedVariables);\n    if (!instance.isEnded()) {\n      setExecution(instance);\n    }\n    return instance;\n  }","skip":false,"length":11,"comment":{"description":"starts a process instance by sending a message to the process engine, passing in the name of the message and any necessary variable values.","params":[{"name":"messageName","type":"String","description":"name of the message that initiates the process instance, which is passed to the `startProcessInstanceByMessage()` method of the Process Engine to start a new process instance based on the specified message."},{"name":"processVariables","type":"Map<String, Object>","description":"variables that will be used by the process instance when it is started, and gets added to the cache of variable map before starting the process instance."}],"returns":{"type":"ProcessInstance","description":"a `ProcessInstance` object representing the started process."}}},{"id":"19aa1b21-e403-498a-8e23-7ab7ab00dba6","ancestors":[],"type":"function","name":"startProcessByMessage","location":{"offset":" ","indent":2,"insert":150,"start":150},"returns":"ProcessInstance","params":[{"name":"messageName","type":"String"},{"name":"businessKey","type":"String"},{"name":"processVariables","type":"Map<String, Object>"}],"code":"public ProcessInstance startProcessByMessage(String messageName, String businessKey, Map<String, Object> processVariables) {\n    assertCommandContextNotActive();\n\n    VariableMap cachedVariables = getAndClearCachedVariableMap();\n    cachedVariables.putAll(processVariables);\n    ProcessInstance instance =  processEngine.getRuntimeService().startProcessInstanceByMessage(messageName, businessKey, cachedVariables);\n    if (!instance.isEnded()) {\n      setExecution(instance);\n    }\n    return instance;\n  }","skip":false,"length":11,"comment":{"description":"starts a process instance based on a message name and business key, passing variable maps as parameters to the process engine's `startProcessInstanceByMessage` method. It retrieves and clears the cached variables before starting the instance and sets the execution status accordingly.","params":[{"name":"messageName","type":"String","description":"name of the message to start the process instance."},{"name":"businessKey","type":"String","description":"unique identifier for a specific business process, which is used to identify the correct process instance to start when calling the `startProcessByMessage()` method."},{"name":"processVariables","type":"Map<String, Object>","description":"variables to be passed to the started process instance, which are added to the existing variable map of the current execution context before starting the process."}],"returns":{"type":"ProcessInstance","description":"a `ProcessInstance` object representing the started process."}}},{"id":"557a2d7e-9458-410b-8d6e-054efdf8ee47","ancestors":[],"type":"function","name":"associateExecutionById","location":{"offset":" ","indent":2,"insert":163,"start":163},"returns":false,"params":[{"name":"executionId","type":"String"}],"code":"public void associateExecutionById(String executionId) {\n    Execution execution = processEngine.getRuntimeService()\n      .createExecutionQuery()\n      .executionId(executionId)\n      .singleResult();\n    if(execution == null) {\n      throw new ProcessEngineCdiException(\"Cannot associate execution by id: no execution with id '\"+executionId+\"' found.\");\n    }\n    associationManager.setExecution(execution);\n  }","skip":false,"length":10,"comment":{"description":"associates an execution with a given ID to a process instance. It retrieves the execution from the repository based on the ID, and sets the execution object to the association manager for further processing.","params":[{"name":"executionId","type":"String","description":"identifier of an execution to be associated with the given `associationManager`."}],"returns":null}},{"id":"93550c92-ef31-4c0b-b810-8ce0142ced97","ancestors":[],"type":"function","name":"signalExecution","location":{"offset":" ","indent":2,"insert":185,"start":185},"returns":false,"params":[{"name":"endConversation","type":"boolean"}],"code":"public void signalExecution(boolean endConversation) {\n    signalExecution();\n    if(endConversation) {\n      conversationInstance.get().end();\n    }\n  }","skip":false,"length":6,"comment":{"description":"is used to indicate that a conversation should end or continue. When `endConversation` is true, the function ends the conversation instance, otherwise it continues the conversation.","params":[{"name":"endConversation","type":"boolean","description":"conclusion of an active conversation with the AI assistant, as it triggers the termination of the conversation instance."}],"returns":null}},{"id":"43730407-e4e4-449e-b946-526edf68ac73","ancestors":[],"type":"function","name":"startTask","location":{"offset":" ","indent":2,"insert":194,"start":194},"returns":"Task","params":[{"name":"taskId","type":"String"}],"code":"public Task startTask(String taskId) {\n    Task currentTask = associationManager.getTask();\n    if(currentTask != null && currentTask.getId().equals(taskId)) {\n      return currentTask;\n    }\n    Task task = processEngine.getTaskService().createTaskQuery().taskId(taskId).singleResult();\n    if(task == null) {\n      throw new ProcessEngineCdiException(\"Cannot resume task with id '\"+taskId+\"', no such task.\");\n    }\n    associationManager.setTask(task);\n    associateExecutionById(task.getExecutionId());\n    return task;\n  }","skip":false,"length":13,"comment":{"description":"retrieves a task based on its ID and sets it as the current task in the association manager. If the task is not found, an exception is thrown. The function also associates the execution with the task's ID.","params":[{"name":"taskId","type":"String","description":"id of the task to be resumed."}],"returns":{"type":"Task","description":"a reference to the task with the specified ID, or an exception if the task does not exist."}}},{"id":"9bb79e83-d5e9-4d4b-a4aa-f73cffbceb34","ancestors":[],"type":"function","name":"startTask","location":{"offset":" ","indent":2,"insert":208,"start":208},"returns":"Task","params":[{"name":"taskId","type":"String"},{"name":"beginConversation","type":"boolean"}],"code":"public Task startTask(String taskId, boolean beginConversation) {\n    if(beginConversation) {\n      Conversation conversation = conversationInstance.get();\n      if(conversation.isTransient()) {\n       conversation.begin();\n      }\n    }\n    return startTask(taskId);\n  }","skip":false,"length":9,"comment":{"description":"starts a task with the given ID, and if the parameter `beginConversation` is true, it also begins a conversation if one does not already exist.","params":[{"name":"taskId","type":"String","description":"id of the task to be started."},{"name":"beginConversation","type":"boolean","description":"initialization of a conversation instance, which determines whether or not the conversation should be initiated when the task is started."}],"returns":{"type":"Task","description":"a task handle that can be used to query the status of the task."}}},{"id":"ae6dc9c8-2f29-4d3a-a749-457e2bcddf7a","ancestors":[],"type":"function","name":"completeTask","location":{"offset":" ","indent":2,"insert":228,"start":228},"returns":false,"params":[{"name":"endConversation","type":"boolean"}],"code":"public void completeTask(boolean endConversation) {\n    completeTask();\n    if(endConversation) {\n      conversationInstance.get().end();\n    }\n  }","skip":false,"length":6,"comment":{"description":"completes a task and ends a conversation, if necessary.","params":[{"name":"endConversation","type":"boolean","description":"conclusion of an ongoing conversation, when set to true it ends the conversation instance."}],"returns":null}},{"id":"ac527e95-ee6b-45ec-98fe-f9d002a1cfdb","ancestors":[],"type":"function","name":"stopTask","location":{"offset":" ","indent":2,"insert":257,"start":257},"returns":false,"params":[{"name":"endConversation","type":"boolean"}],"code":"public void stopTask(boolean endConversation) {\n    stopTask();\n    if(endConversation) {\n      conversationInstance.get().end();\n    }\n  }","skip":false,"length":6,"comment":{"description":"stops a task and ends a conversation if necessary.","params":[{"name":"endConversation","type":"boolean","description":"conclusion of the conversation, prompting the instance of the conversation to end when set to `true`."}],"returns":null}},{"id":"63f1a46f-6855-4e6d-9032-26a226c3cbda","ancestors":[],"type":"function","name":"getVariable","location":{"offset":" ","indent":2,"insert":267,"start":267},"returns":"<T>","params":[{"name":"variableName","type":"String"}],"code":"@SuppressWarnings(\"unchecked\")\n  public <T> T getVariable(String variableName) {\n    TypedValue variable = getVariableTyped(variableName);\n    if (variable != null) {\n      Object value = variable.getValue();\n      if (value != null) {\n        return (T) value;\n      }\n    }\n    return null;\n  }","skip":false,"length":11,"comment":{"description":"retrieves a variable's value of type T from an activity's variables. If the variable is null, it returns null.","params":[{"name":"variableName","type":"String","description":"name of a variable to be retrieved."}],"returns":{"type":"<T>","description":"a non-null object of type `T`, or `null` if no such variable exists."}}},{"id":"7ea4118a-a802-4d98-ae23-644ca9fccf83","ancestors":[],"type":"function","name":"getVariableTyped","location":{"offset":" ","indent":2,"insert":280,"start":280},"returns":"<T extends TypedValue>","params":[{"name":"variableName","type":"String"}],"code":"@SuppressWarnings(\"unchecked\")\n  public <T extends TypedValue> T getVariableTyped(String variableName) {\n    TypedValue variable = associationManager.getVariable(variableName);\n    return variable != null ? (T) (variable) : null;\n  }","skip":false,"length":5,"comment":{"description":"retrieves a typed value associated with a given variable name, returning the typed value as a generic type T if found, or null otherwise.","params":[{"name":"variableName","type":"String","description":"name of a variable that is being retrieved from the association manager."}],"returns":{"type":"<T extends TypedValue>","description":"a typed value of the specified variable name, or `null` if the variable is not found."}}},{"id":"c532ef0c-0784-462e-8beb-825acdfee6cd","ancestors":[],"type":"function","name":"setVariable","location":{"offset":" ","indent":2,"insert":287,"start":287},"returns":false,"params":[{"name":"variableName","type":"String"},{"name":"value","type":"Object"}],"code":"public void setVariable(String variableName, Object value) {\n    associationManager.setVariable(variableName, value);\n  }","skip":false,"length":3,"comment":{"description":"sets a variable in an association manager based on a given name and value.","params":[{"name":"variableName","type":"String","description":"name of the variable to be set."},{"name":"value","type":"Object","description":"object to be associated with the specified variable name."}],"returns":null}},{"id":"7d385745-2b1a-4bf5-8218-ffff5b795c78","ancestors":[],"type":"function","name":"getVariableLocal","location":{"offset":" ","indent":2,"insert":317,"start":317},"returns":"<T>","params":[{"name":"variableName","type":"String"}],"code":"@SuppressWarnings(\"unchecked\")\n  public <T> T getVariableLocal(String variableName) {\n    TypedValue variable = getVariableLocalTyped(variableName);\n    if (variable != null) {\n      Object value = variable.getValue();\n      if (value != null) {\n        return (T) value;\n      }\n    }\n    return null;\n  }","skip":false,"length":11,"comment":{"description":"retrieves the value of a variable with the given name from the local storage, and returns it as a specified type (T). If the variable is null or its value is null, it returns null.","params":[{"name":"variableName","type":"String","description":"name of a variable to be retrieved from the local scope, and it is used to retrieve the corresponding typed value from the `getVariableLocalTyped()` method."}],"returns":{"type":"<T>","description":"a non-null `T` object representing the value of the local variable with the given name, or `null` if the variable is not found."}}},{"id":"e064720e-02e7-4c2b-b8d2-d3c3db9ba449","ancestors":[],"type":"function","name":"getVariableLocalTyped","location":{"offset":" ","indent":2,"insert":330,"start":330},"returns":"<T extends TypedValue>","params":[{"name":"variableName","type":"String"}],"code":"@SuppressWarnings(\"unchecked\")\n  public <T extends TypedValue> T getVariableLocalTyped(String variableName) {\n    TypedValue variable = associationManager.getVariableLocal(variableName);\n    return variable != null ? (T) variable : null;\n  }","skip":false,"length":5,"comment":{"description":"retrieves a TypedValue object associated with a given variable name, using the Association Manager's local storage. If the variable is found, it returns the object as a specified type (T), otherwise it returns null.","params":[{"name":"variableName","type":"String","description":"name of the variable to be retrieved from the association manager."}],"returns":{"type":"<T extends TypedValue>","description":"a `T` object representing the specified variable or `null` if the variable is not found."}}},{"id":"9a41a4f0-2445-4f1c-bd94-cd63e74d2475","ancestors":[],"type":"function","name":"setVariableLocal","location":{"offset":" ","indent":2,"insert":337,"start":337},"returns":false,"params":[{"name":"variableName","type":"String"},{"name":"value","type":"Object"}],"code":"public void setVariableLocal(String variableName, Object value) {\n    associationManager.setVariableLocal(variableName, value);\n  }","skip":false,"length":3,"comment":{"description":"sets a local variable associated with an instance of an AssociationManager.","params":[{"name":"variableName","type":"String","description":"name of a variable that will be assigned the value provided by the `value` parameter."},{"name":"value","type":"Object","description":"object that will be stored as the value of the specified variable in the local association manager."}],"returns":null}},{"id":"cc9eb4ad-68a2-4109-b885-6af4db03b989","ancestors":[],"type":"function","name":"setTask","location":{"offset":" ","indent":2,"insert":379,"start":379},"returns":false,"params":[{"name":"task","type":"Task"}],"code":"public void setTask(Task task) {\n    startTask(task.getId());\n  }","skip":false,"length":3,"comment":{"description":"sets the value of a Task object to an id.","params":[{"name":"task","type":"Task","description":"Id of an existing task to be started in the function `startTask()` when the `setTask()` method is called."}],"returns":null}},{"id":"5f20fef5-04ac-47b5-8897-0715f930b216","ancestors":[],"type":"function","name":"setTaskId","location":{"offset":" ","indent":2,"insert":384,"start":384},"returns":false,"params":[{"name":"taskId","type":"String"}],"code":"public void setTaskId(String taskId) {\n    startTask(taskId);\n  }","skip":false,"length":3,"comment":{"description":"sets the value of the `taskId` field to a given `String` argument, starting a new task with that ID.","params":[{"name":"taskId","type":"String","description":"identity of a task to be initiated by calling the `startTask` method."}],"returns":null}},{"id":"7e8587c4-c1c9-43ab-aab0-cb568612e337","ancestors":[],"type":"function","name":"setExecution","location":{"offset":" ","indent":2,"insert":389,"start":389},"returns":false,"params":[{"name":"execution","type":"Execution"}],"code":"public void setExecution(Execution execution) {\n    associateExecutionById(execution.getId());\n  }","skip":false,"length":3,"comment":{"description":"associates an execution with a unique identifier, stored in the `id` field.","params":[{"name":"execution","type":"Execution","description":"execution to be associated with the current code document, as indicated by the `associateExecutionById()` method call."}],"returns":null}},{"id":"58d68365-4252-4e5f-8e9a-3c61a80dde59","ancestors":[],"type":"function","name":"setExecutionId","location":{"offset":" ","indent":2,"insert":394,"start":394},"returns":false,"params":[{"name":"executionId","type":"String"}],"code":"protected void setExecutionId(String executionId) {\n    associateExecutionById(executionId);\n  }","skip":false,"length":3,"comment":{"description":"associates an execution ID with a specific code instance.","params":[{"name":"executionId","type":"String","description":"unique identifier for the execution being associated with the current instance of the code, which allows for proper association and tracking of the execution within the system."}],"returns":null}}]}}}