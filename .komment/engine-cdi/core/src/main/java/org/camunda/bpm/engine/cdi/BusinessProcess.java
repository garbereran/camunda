{"name":"BusinessProcess.java","path":"engine-cdi/core/src/main/java/org/camunda/bpm/engine/cdi/BusinessProcess.java","content":{"structured":{"description":"","items":[{"id":"9a910a85-f42d-4926-b14f-d2c6540c46b7","ancestors":[],"type":"function","name":"startProcessById","location":{"offset":" ","indent":2,"insert":96,"start":96},"returns":"ProcessInstance","params":[{"name":"processDefinitionId","type":"String"}],"code":"public ProcessInstance startProcessById(String processDefinitionId) {\n    assertCommandContextNotActive();\n\n    ProcessInstance instance = processEngine.getRuntimeService().startProcessInstanceById(processDefinitionId, getAndClearCachedVariableMap());\n    if (!instance.isEnded()) {\n      setExecution(instance);\n    }\n    return instance;\n  }","skip":false,"length":9,"comment":{"description":"","params":[{"name":"processDefinitionId","type":"String","description":"ID of the process definition to be started."}],"returns":{"type":"ProcessInstance","description":"a `ProcessInstance` object representing the started process instance."}}},{"id":"b3b8c33b-b8ba-4015-9330-7ffa6e3b5331","ancestors":[],"type":"function","name":"startProcessById","location":{"offset":" ","indent":2,"insert":106,"start":106},"returns":"ProcessInstance","params":[{"name":"processDefinitionId","type":"String"},{"name":"businessKey","type":"String"}],"code":"public ProcessInstance startProcessById(String processDefinitionId, String businessKey) {\n    assertCommandContextNotActive();\n\n    ProcessInstance instance = processEngine.getRuntimeService().startProcessInstanceById(processDefinitionId, businessKey, getAndClearCachedVariableMap());\n    if (!instance.isEnded()) {\n      setExecution(instance);\n    }\n    return instance;\n  }","skip":false,"length":9,"comment":{"description":"starts a process instance based on a specified process definition ID and business key, retrieves the instance from the process engine, sets its execution state, and returns it.","params":[{"name":"processDefinitionId","type":"String","description":"identity of the process definition to start."},{"name":"businessKey","type":"String","description":""}],"returns":{"type":"ProcessInstance","description":"a `ProcessInstance` object representing the started process."}}},{"id":"f9b42302-c6ce-4f66-815d-81f3f93d4b5e","ancestors":[],"type":"function","name":"startProcessById","location":{"offset":" ","indent":2,"insert":116,"start":116},"returns":"ProcessInstance","params":[{"name":"processDefinitionId","type":"String"},{"name":"variables","type":"Map<String, Object>"}],"code":"public ProcessInstance startProcessById(String processDefinitionId, Map<String, Object> variables) {\n    assertCommandContextNotActive();\n\n    VariableMap cachedVariables = getAndClearCachedVariableMap();\n    cachedVariables.putAll(variables);\n    ProcessInstance instance = processEngine.getRuntimeService().startProcessInstanceById(processDefinitionId, cachedVariables);\n    if (!instance.isEnded()) {\n      setExecution(instance);\n    }\n    return instance;\n  }","skip":false,"length":11,"comment":{"description":"","params":[{"name":"processDefinitionId","type":"String","description":"identity of the process definition to be executed."},{"name":"variables","type":"Map<String, Object>","description":""}],"returns":{"type":"ProcessInstance","description":"a `ProcessInstance` object containing details of the started process."}}},{"id":"3e32dd40-6753-4cf7-9984-eec1d736c590","ancestors":[],"type":"function","name":"startProcessById","location":{"offset":" ","indent":2,"insert":128,"start":128},"returns":"ProcessInstance","params":[{"name":"processDefinitionId","type":"String"},{"name":"businessKey","type":"String"},{"name":"variables","type":"Map<String, Object>"}],"code":"public ProcessInstance startProcessById(String processDefinitionId, String businessKey, Map<String, Object> variables) {\n    assertCommandContextNotActive();\n\n    VariableMap cachedVariables = getAndClearCachedVariableMap();\n    cachedVariables.putAll(variables);\n    ProcessInstance instance = processEngine.getRuntimeService().startProcessInstanceById(processDefinitionId, businessKey, cachedVariables);\n    if (!instance.isEnded()) {\n      setExecution(instance);\n    }\n    return instance;\n  }","skip":false,"length":11,"comment":{"description":"","params":[{"name":"processDefinitionId","type":"String","description":"identifier of the process definition that is being started."},{"name":"businessKey","type":"String","description":""},{"name":"variables","type":"Map<String, Object>","description":"map of variables to be passed to the process instance when starting it."}],"returns":{"type":"ProcessInstance","description":"a `ProcessInstance` object representing the started process."}}},{"id":"4bb762b2-df84-4e11-a72e-1c7566073ffe","ancestors":[],"type":"function","name":"startProcessByKey","location":{"offset":" ","indent":2,"insert":140,"start":140},"returns":"ProcessInstance","params":[{"name":"key","type":"String"}],"code":"public ProcessInstance startProcessByKey(String key) {\n    assertCommandContextNotActive();\n\n    ProcessInstance instance = processEngine.getRuntimeService().startProcessInstanceByKey(key, getAndClearCachedVariableMap());\n    if (!instance.isEnded()) {\n      setExecution(instance);\n    }\n    return instance;\n  }","skip":false,"length":9,"comment":{"description":"","params":[{"name":"key","type":"String","description":"process instance key to start."}],"returns":{"type":"ProcessInstance","description":""}}},{"id":"79df6b77-6f57-4daa-a16f-3ac089fb16fa","ancestors":[],"type":"function","name":"startProcessByKey","location":{"offset":" ","indent":2,"insert":150,"start":150},"returns":"ProcessInstance","params":[{"name":"key","type":"String"},{"name":"businessKey","type":"String"}],"code":"public ProcessInstance startProcessByKey(String key, String businessKey) {\n    assertCommandContextNotActive();\n\n    ProcessInstance instance = processEngine.getRuntimeService().startProcessInstanceByKey(key, businessKey, getAndClearCachedVariableMap());\n    if (!instance.isEnded()) {\n      setExecution(instance);\n    }\n    return instance;\n  }","skip":false,"length":9,"comment":{"description":"starts a process instance based on its key and business key, checks if it has ended, and sets the execution variable if not.","params":[{"name":"key","type":"String","description":""},{"name":"businessKey","type":"String","description":"unique identifier of the business process associated with the given `key`."}],"returns":{"type":"ProcessInstance","description":"a `ProcessInstance` object representing the started process."}}},{"id":"411f684d-28c9-444f-8def-39708ec30978","ancestors":[],"type":"function","name":"startProcessByKey","location":{"offset":" ","indent":2,"insert":160,"start":160},"returns":"ProcessInstance","params":[{"name":"key","type":"String"},{"name":"variables","type":"Map<String, Object>"}],"code":"public ProcessInstance startProcessByKey(String key, Map<String, Object> variables) {\n    assertCommandContextNotActive();\n\n    VariableMap cachedVariables = getAndClearCachedVariableMap();\n    cachedVariables.putAll(variables);\n    ProcessInstance instance = processEngine.getRuntimeService().startProcessInstanceByKey(key, cachedVariables);\n    if (!instance.isEnded()) {\n      setExecution(instance);\n    }\n    return instance;\n  }","skip":false,"length":11,"comment":{"description":"","params":[{"name":"key","type":"String","description":"unique process instance key to be started."},{"name":"variables","type":"Map<String, Object>","description":""}],"returns":{"type":"ProcessInstance","description":"a `ProcessInstance` object representing the started process."}}},{"id":"a0ec42c8-c5e1-4958-8c3a-825693c3edb8","ancestors":[],"type":"function","name":"startProcessByKey","location":{"offset":" ","indent":2,"insert":172,"start":172},"returns":"ProcessInstance","params":[{"name":"key","type":"String"},{"name":"businessKey","type":"String"},{"name":"variables","type":"Map<String, Object>"}],"code":"public ProcessInstance startProcessByKey(String key, String businessKey, Map<String, Object> variables) {\n    assertCommandContextNotActive();\n\n    VariableMap cachedVariables = getAndClearCachedVariableMap();\n    cachedVariables.putAll(variables);\n    ProcessInstance instance = processEngine.getRuntimeService().startProcessInstanceByKey(key, businessKey, cachedVariables);\n    if (!instance.isEnded()) {\n      setExecution(instance);\n    }\n    return instance;\n  }","skip":false,"length":11,"comment":{"description":"","params":[{"name":"key","type":"String","description":""},{"name":"businessKey","type":"String","description":"business key of the process instance to be started, which is used to identify the specific process instance to be executed by the `startProcessInstanceByKey()` method."},{"name":"variables","type":"Map<String, Object>","description":"Map of variables to be passed to the process instance when it is started, allowing for dynamic configuration and customization of the process."}],"returns":{"type":"ProcessInstance","description":"a `ProcessInstance` object representing the started process."}}},{"id":"12cdb5b4-86de-47e4-94ac-2421de8c7c8a","ancestors":[],"type":"function","name":"startProcessByMessage","location":{"offset":" ","indent":2,"insert":184,"start":184},"returns":"ProcessInstance","params":[{"name":"messageName","type":"String"}],"code":"public ProcessInstance startProcessByMessage(String messageName) {\n    assertCommandContextNotActive();\n\n    VariableMap cachedVariables = getAndClearCachedVariableMap();\n    ProcessInstance instance =  processEngine.getRuntimeService().startProcessInstanceByMessage(messageName, cachedVariables);\n    if (!instance.isEnded()) {\n      setExecution(instance);\n    }\n    return instance;\n  }","skip":false,"length":10,"comment":{"description":"","params":[{"name":"messageName","type":"String","description":"message to start a process instance by, which is used by the `processEngine.getRuntimeService().startProcessInstanceByMessage()` method to identify the appropriate process instance to execute."}],"returns":{"type":"ProcessInstance","description":""}}},{"id":"c5b54ddd-2d63-43b0-af4e-5200f84cd544","ancestors":[],"type":"function","name":"startProcessByMessage","location":{"offset":" ","indent":2,"insert":195,"start":195},"returns":"ProcessInstance","params":[{"name":"messageName","type":"String"},{"name":"processVariables","type":"Map<String, Object>"}],"code":"public ProcessInstance startProcessByMessage(String messageName, Map<String, Object> processVariables) {\n    assertCommandContextNotActive();\n\n    VariableMap cachedVariables = getAndClearCachedVariableMap();\n    cachedVariables.putAll(processVariables);\n    ProcessInstance instance =  processEngine.getRuntimeService().startProcessInstanceByMessage(messageName, cachedVariables);\n    if (!instance.isEnded()) {\n      setExecution(instance);\n    }\n    return instance;\n  }","skip":false,"length":11,"comment":{"description":"starts a process instance based on a given message name and process variables, retrieves the latest cached variable map, updates it with provided variables, and starts the process instance using the `getRuntimeService().startProcessInstanceByMessage()` method. If the instance is not ended after starting, sets its execution to the function.","params":[{"name":"messageName","type":"String","description":""},{"name":"processVariables","type":"Map<String, Object>","description":"variables that are used to initialize the process instance when starting it by message."}],"returns":{"type":"ProcessInstance","description":"a `ProcessInstance` object representing the started process."}}},{"id":"57fe2791-47af-4a6b-abe2-9992f0aacc59","ancestors":[],"type":"function","name":"startProcessByMessage","location":{"offset":" ","indent":2,"insert":207,"start":207},"returns":"ProcessInstance","params":[{"name":"messageName","type":"String"},{"name":"businessKey","type":"String"},{"name":"processVariables","type":"Map<String, Object>"}],"code":"public ProcessInstance startProcessByMessage(String messageName, String businessKey, Map<String, Object> processVariables) {\n    assertCommandContextNotActive();\n\n    VariableMap cachedVariables = getAndClearCachedVariableMap();\n    cachedVariables.putAll(processVariables);\n    ProcessInstance instance =  processEngine.getRuntimeService().startProcessInstanceByMessage(messageName, businessKey, cachedVariables);\n    if (!instance.isEnded()) {\n      setExecution(instance);\n    }\n    return instance;\n  }","skip":false,"length":11,"comment":{"description":"","params":[{"name":"messageName","type":"String","description":""},{"name":"businessKey","type":"String","description":"identifier of the business process to be started, which is used to identify the correct process instance in the process engine's runtime service."},{"name":"processVariables","type":"Map<String, Object>","description":"variables that should be used to start the process instance, which are then cached and used to initiate the process instance via the `startProcessInstanceByMessage()` method."}],"returns":{"type":"ProcessInstance","description":"a `ProcessInstance` object representing the started process."}}},{"id":"c67f0f60-f0e6-4f4d-9aa8-330c0a86e308","ancestors":[],"type":"function","name":"isTaskAssociated","location":{"offset":" ","indent":2,"insert":355,"start":355},"returns":"boolean","params":[],"code":"public boolean isTaskAssociated() {\n    return associationManager.getTask() != null;\n  }","skip":false,"length":3,"comment":{"description":"","params":[],"returns":{"type":"boolean","description":"a boolean value indicating whether a task is associated with the current object."}}},{"id":"3f228528-43c0-456e-8652-3d217c201c92","ancestors":[],"type":"function","name":"assertExecutionAssociated","location":{"offset":" ","indent":2,"insert":734,"start":734},"returns":false,"params":[],"code":"protected void assertExecutionAssociated() {\n    if (associationManager.getExecution() == null) {\n      throw new ProcessEngineCdiException(\"No execution associated. Call busniessProcess.associateExecutionById() or businessProcess.startTask() first.\");\n    }\n  }","skip":false,"length":5,"comment":{"description":"","params":[],"returns":null}},{"id":"40025d23-f6be-4420-8d53-82ec95e3df25","ancestors":[],"type":"function","name":"assertTaskAssociated","location":{"offset":" ","indent":2,"insert":740,"start":740},"returns":false,"params":[],"code":"protected void assertTaskAssociated() {\n    if (associationManager.getTask() == null) {\n      throw new ProcessEngineCdiException(\"No task associated. Call businessProcess.startTask() first.\");\n    }\n  }","skip":false,"length":5,"comment":{"description":"verifies that a task is associated with the current business process instance, and throws an exception if no task is associated.","params":[],"returns":null}},{"id":"2d928e1a-b82b-4628-94f7-f72fbd2cf07d","ancestors":[],"type":"function","name":"assertCommandContextNotActive","location":{"offset":" ","indent":2,"insert":746,"start":746},"returns":false,"params":[],"code":"protected void assertCommandContextNotActive() {\n    if(Context.getCommandContext() != null) {\n      throw new ProcessEngineCdiException(\"Cannot use this method of the BusinessProcess bean from an active command context.\");\n    }\n  }","skip":false,"length":5,"comment":{"description":"","params":[],"returns":null}}]}}}