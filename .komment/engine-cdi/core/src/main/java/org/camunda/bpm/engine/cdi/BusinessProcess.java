{"name":"BusinessProcess.java","path":"engine-cdi/core/src/main/java/org/camunda/bpm/engine/cdi/BusinessProcess.java","content":{"structured":{"description":"A BusinessProcess class that manages the association between a task and an execution in a process engine. It provides methods for associating a task with an execution, flushing the variable cache, getting the associated task or execution, and checking if a task is associated. The code also includes internal implementation details such as assertions and method calls to other parts of the process engine framework.","items":[{"id":"52b3bc2d-4d69-958f-a042-ea27280ebf28","ancestors":[],"type":"function","description":"provides a set of methods for managing the association between a process instance and a task or execution, as well as flushing the cached variables to the Task or Execution. The class also provides getters and setters for the associated execution and task, and allows for the creation of a new process instance.","name":"BusinessProcess","code":"@Named\npublic class BusinessProcess implements Serializable {\n\n  private static final long serialVersionUID = 1L;\n\n  @Inject private ProcessEngine processEngine;\n\n  @Inject private ContextAssociationManager associationManager;\n\n  @Inject private Instance<Conversation> conversationInstance;\n\n  public ProcessInstance startProcessById(String processDefinitionId) {\n    assertCommandContextNotActive();\n\n    ProcessInstance instance = processEngine.getRuntimeService().startProcessInstanceById(processDefinitionId, getAndClearCachedVariableMap());\n    if (!instance.isEnded()) {\n      setExecution(instance);\n    }\n    return instance;\n  }\n\n  public ProcessInstance startProcessById(String processDefinitionId, String businessKey) {\n    assertCommandContextNotActive();\n\n    ProcessInstance instance = processEngine.getRuntimeService().startProcessInstanceById(processDefinitionId, businessKey, getAndClearCachedVariableMap());\n    if (!instance.isEnded()) {\n      setExecution(instance);\n    }\n    return instance;\n  }\n\n  public ProcessInstance startProcessById(String processDefinitionId, Map<String, Object> variables) {\n    assertCommandContextNotActive();\n\n    VariableMap cachedVariables = getAndClearCachedVariableMap();\n    cachedVariables.putAll(variables);\n    ProcessInstance instance = processEngine.getRuntimeService().startProcessInstanceById(processDefinitionId, cachedVariables);\n    if (!instance.isEnded()) {\n      setExecution(instance);\n    }\n    return instance;\n  }\n\n  public ProcessInstance startProcessById(String processDefinitionId, String businessKey, Map<String, Object> variables) {\n    assertCommandContextNotActive();\n\n    VariableMap cachedVariables = getAndClearCachedVariableMap();\n    cachedVariables.putAll(variables);\n    ProcessInstance instance = processEngine.getRuntimeService().startProcessInstanceById(processDefinitionId, businessKey, cachedVariables);\n    if (!instance.isEnded()) {\n      setExecution(instance);\n    }\n    return instance;\n  }\n\n  public ProcessInstance startProcessByKey(String key) {\n    assertCommandContextNotActive();\n\n    ProcessInstance instance = processEngine.getRuntimeService().startProcessInstanceByKey(key, getAndClearCachedVariableMap());\n    if (!instance.isEnded()) {\n      setExecution(instance);\n    }\n    return instance;\n  }\n\n  public ProcessInstance startProcessByKey(String key, String businessKey) {\n    assertCommandContextNotActive();\n\n    ProcessInstance instance = processEngine.getRuntimeService().startProcessInstanceByKey(key, businessKey, getAndClearCachedVariableMap());\n    if (!instance.isEnded()) {\n      setExecution(instance);\n    }\n    return instance;\n  }\n\n  public ProcessInstance startProcessByKey(String key, Map<String, Object> variables) {\n    assertCommandContextNotActive();\n\n    VariableMap cachedVariables = getAndClearCachedVariableMap();\n    cachedVariables.putAll(variables);\n    ProcessInstance instance = processEngine.getRuntimeService().startProcessInstanceByKey(key, cachedVariables);\n    if (!instance.isEnded()) {\n      setExecution(instance);\n    }\n    return instance;\n  }\n\n  public ProcessInstance startProcessByKey(String key, String businessKey, Map<String, Object> variables) {\n    assertCommandContextNotActive();\n\n    VariableMap cachedVariables = getAndClearCachedVariableMap();\n    cachedVariables.putAll(variables);\n    ProcessInstance instance = processEngine.getRuntimeService().startProcessInstanceByKey(key, businessKey, cachedVariables);\n    if (!instance.isEnded()) {\n      setExecution(instance);\n    }\n    return instance;\n  }\n\n  public ProcessInstance startProcessByMessage(String messageName) {\n    assertCommandContextNotActive();\n\n    VariableMap cachedVariables = getAndClearCachedVariableMap();\n    ProcessInstance instance =  processEngine.getRuntimeService().startProcessInstanceByMessage(messageName, cachedVariables);\n    if (!instance.isEnded()) {\n      setExecution(instance);\n    }\n    return instance;\n  }\n\n  public ProcessInstance startProcessByMessage(String messageName, Map<String, Object> processVariables) {\n    assertCommandContextNotActive();\n\n    VariableMap cachedVariables = getAndClearCachedVariableMap();\n    cachedVariables.putAll(processVariables);\n    ProcessInstance instance =  processEngine.getRuntimeService().startProcessInstanceByMessage(messageName, cachedVariables);\n    if (!instance.isEnded()) {\n      setExecution(instance);\n    }\n    return instance;\n  }\n\n  public ProcessInstance startProcessByMessage(String messageName, String businessKey, Map<String, Object> processVariables) {\n    assertCommandContextNotActive();\n\n    VariableMap cachedVariables = getAndClearCachedVariableMap();\n    cachedVariables.putAll(processVariables);\n    ProcessInstance instance =  processEngine.getRuntimeService().startProcessInstanceByMessage(messageName, businessKey, cachedVariables);\n    if (!instance.isEnded()) {\n      setExecution(instance);\n    }\n    return instance;\n  }\n\n\n  /**\n   * Associate with the provided execution. This starts a unit of work.\n   *\n   * @param executionId\n   *          the id of the execution to associate with.\n   * @throw ProcessEngineCdiException\n   *          if no such execution exists\n   */\n  public void associateExecutionById(String executionId) {\n    Execution execution = processEngine.getRuntimeService()\n      .createExecutionQuery()\n      .executionId(executionId)\n      .singleResult();\n    if(execution == null) {\n      throw new ProcessEngineCdiException(\"Cannot associate execution by id: no execution with id '\"+executionId+\"' found.\");\n    }\n    associationManager.setExecution(execution);\n  }\n\n  /**\n   * returns true if an {@link Execution} is associated.\n   *\n   * @see #associateExecutionById(String)\n   */\n  public boolean isAssociated() {\n    return associationManager.getExecutionId() != null;\n  }\n\n  /**\n   * Signals the current execution, see {@link RuntimeService#signal(String)}\n   * <p/>\n   * Ends the current unit of work (flushes changes to process variables set\n   * using {@link #setVariable(String, Object)} or made on\n   * {@link BusinessProcessScoped @BusinessProcessScoped} beans).\n   *\n   * @throws ProcessEngineCdiException\n   *           if no execution is currently associated\n   * @throws ProcessEngineException\n   *           if the activiti command fails\n   */\n  public void signalExecution() {\n    assertExecutionAssociated();\n    processEngine.getRuntimeService().setVariablesLocal(associationManager.getExecutionId(), getAndClearCachedLocalVariableMap());\n    processEngine.getRuntimeService().signal(associationManager.getExecutionId(), getAndClearCachedVariableMap());\n    associationManager.disAssociate();\n  }\n\n  /**\n   * @see #signalExecution()\n   *\n   * In addition, this method allows to end the current conversation\n   */\n  public void signalExecution(boolean endConversation) {\n    signalExecution();\n    if(endConversation) {\n      conversationInstance.get().end();\n    }\n  }\n\n  // -------------------------------------\n\n  /**\n   * Associates the task with the provided taskId with the current conversation.\n   * <p/>\n   *\n   * @param taskId\n   *          the id of the task\n   *\n   * @return the resumed task\n   *\n   * @throws ProcessEngineCdiException\n   *           if no such task is found\n   */\n  public Task startTask(String taskId) {\n    Task currentTask = associationManager.getTask();\n    if(currentTask != null && currentTask.getId().equals(taskId)) {\n      return currentTask;\n    }\n    Task task = processEngine.getTaskService().createTaskQuery().taskId(taskId).singleResult();\n    if(task == null) {\n      throw new ProcessEngineCdiException(\"Cannot resume task with id '\"+taskId+\"', no such task.\");\n    }\n    associationManager.setTask(task);\n    associateExecutionById(task.getExecutionId());\n    return task;\n  }\n\n  /**\n   * @see #startTask(String)\n   *\n   * this method allows to start a conversation if no conversation is active\n   */\n  public Task startTask(String taskId, boolean beginConversation) {\n    if(beginConversation) {\n      Conversation conversation = conversationInstance.get();\n      if(conversation.isTransient()) {\n       conversation.begin();\n      }\n    }\n    return startTask(taskId);\n  }\n\n  /**\n   * Completes the current UserTask, see {@link TaskService#complete(String)}\n   * <p/>\n   * Ends the current unit of work (flushes changes to process variables set\n   * using {@link #setVariable(String, Object)} or made on\n   * {@link BusinessProcessScoped @BusinessProcessScoped} beans).\n   *\n   * @throws ProcessEngineCdiException\n   *           if no task is currently associated\n   * @throws ProcessEngineException\n   *           if the activiti command fails\n   */\n  public void completeTask() {\n    assertTaskAssociated();\n    processEngine.getTaskService().setVariablesLocal(getTask().getId(), getAndClearCachedLocalVariableMap());\n    processEngine.getTaskService().setVariables(getTask().getId(), getAndClearCachedVariableMap());\n    processEngine.getTaskService().complete(getTask().getId());\n    associationManager.disAssociate();\n  }\n\n  /**\n   * @see BusinessProcess#completeTask()\n   *\n   * In addition this allows to end the current conversation.\n   *\n   */\n  public void completeTask(boolean endConversation) {\n    completeTask();\n    if(endConversation) {\n      conversationInstance.get().end();\n    }\n  }\n\n  public boolean isTaskAssociated() {\n    return associationManager.getTask() != null;\n  }\n\n  /**\n   * Save the currently associated task.\n   *\n   * @throws ProcessEngineCdiException if called from a process engine command or if no Task is currently associated.\n   *\n   */\n  public void saveTask() {\n    assertCommandContextNotActive();\n    assertTaskAssociated();\n\n    final Task task = getTask();\n    // save the task\n    processEngine.getTaskService().saveTask(task);\n  }\n\n  /**\n   * <p>Stop working on a task. Clears the current association.</p>\n   *\n   * <p>NOTE: this method does not flush any changes.</p>\n   * <ul>\n   *  <li>If you want to flush changes to process variables, call {@link #flushVariableCache()} prior to calling this method,</li>\n   *  <li>If you need to flush changes to the task object, use {@link #saveTask()} prior to calling this method.</li>\n   * </ul>\n   *\n   * @throws ProcessEngineCdiException if called from a process engine command or if no Task is currently associated.\n   */\n  public void stopTask() {\n    assertCommandContextNotActive();\n    assertTaskAssociated();\n    associationManager.disAssociate();\n  }\n\n  /**\n   * <p>Stop working on a task. Clears the current association.</p>\n   *\n   * <p>NOTE: this method does not flush any changes.</p>\n   * <ul>\n   *  <li>If you want to flush changes to process variables, call {@link #flushVariableCache()} prior to calling this method,</li>\n   *  <li>If you need to flush changes to the task object, use {@link #saveTask()} prior to calling this method.</li>\n   * </ul>\n   *\n   * <p>This method allows you to optionally end the current conversation</p>\n   *\n   * @param endConversation if true, end current conversation.\n   * @throws ProcessEngineCdiException if called from a process engine command or if no Task is currently associated.\n   */\n  public void stopTask(boolean endConversation) {\n    stopTask();\n    if(endConversation) {\n      conversationInstance.get().end();\n    }\n  }\n\n  // -------------------------------------------------\n\n  /**\n   * @param variableName\n   *          the name of the process variable for which the value is to be\n   *          retrieved\n   * @return the value of the provided process variable or 'null' if no such\n   *         variable is set\n   */\n  @SuppressWarnings(\"unchecked\")\n  public <T> T getVariable(String variableName) {\n    TypedValue variable = getVariableTyped(variableName);\n    if (variable != null) {\n      Object value = variable.getValue();\n      if (value != null) {\n        return (T) value;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * @param variableName\n   *          the name of the process variable for which the value is to be\n   *          retrieved\n   * @return the typed value of the provided process variable or 'null' if no\n   *         such variable is set\n   *\n   * @since 7.3\n   */\n  @SuppressWarnings(\"unchecked\")\n  public <T extends TypedValue> T getVariableTyped(String variableName) {\n    TypedValue variable = associationManager.getVariable(variableName);\n    return variable != null ? (T) (variable) : null;\n  }\n\n  /**\n   * Set a value for a process variable.\n   * <p />\n   *\n   * <strong>NOTE:</strong> If no execution is currently associated,\n   * the value is temporarily cached and flushed to the process instance\n   * at the end of the unit of work\n   *\n   * @param variableName\n   *          the name of the process variable for which a value is to be set\n   * @param value\n   *          the value to be set\n   *\n   */\n  public void setVariable(String variableName, Object value) {\n    associationManager.setVariable(variableName, value);\n  }\n\n  /**\n   * Get the {@link VariableMap} of cached variables and clear the internal variable cache.\n   *\n   * @return the {@link VariableMap} of cached variables\n   *\n   * @since 7.3\n   */\n  public VariableMap getAndClearCachedVariableMap() {\n    VariableMap cachedVariables = associationManager.getCachedVariables();\n    VariableMap copy = new VariableMapImpl(cachedVariables);\n    cachedVariables.clear();\n    return copy;\n  }\n\n  /**\n   * Get the map of cached variables and clear the internal variable cache.\n   *\n   * @return the map of cached variables\n   * @deprecated use {@link #getAndClearCachedVariableMap()} instead\n   */\n  @Deprecated\n  public Map<String, Object> getAndClearVariableCache() {\n    return getAndClearCachedVariableMap();\n  }\n\n  /**\n   * Get a copy of the {@link VariableMap} of cached variables.\n   *\n   * @return a copy of the {@link VariableMap} of cached variables.\n   *\n   * @since 7.3\n   */\n  public VariableMap getCachedVariableMap() {\n    return new VariableMapImpl(associationManager.getCachedVariables());\n  }\n\n  /**\n   * Get a copy of the map of cached variables.\n   *\n   * @return a copy of the map of cached variables.\n   * @deprecated use {@link #getCachedVariableMap()} instead\n   */\n  @Deprecated\n  public Map<String, Object> getVariableCache() {\n    return getCachedVariableMap();\n  }\n\n  /**\n   * @param variableName\n   *          the name of the local process variable for which the value is to be\n   *          retrieved\n   * @return the value of the provided local process variable or 'null' if no such\n   *         variable is set\n   */\n  @SuppressWarnings(\"unchecked\")\n  public <T> T getVariableLocal(String variableName) {\n    TypedValue variable = getVariableLocalTyped(variableName);\n    if (variable != null) {\n      Object value = variable.getValue();\n      if (value != null) {\n        return (T) value;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * @param variableName\n   *          the name of the local process variable for which the value is to\n   *          be retrieved\n   * @return the typed value of the provided local process variable or 'null' if\n   *         no such variable is set\n   *\n   * @since 7.3\n   */\n  @SuppressWarnings(\"unchecked\")\n  public <T extends TypedValue> T getVariableLocalTyped(String variableName) {\n    TypedValue variable = associationManager.getVariableLocal(variableName);\n    return variable != null ? (T) variable : null;\n  }\n\n  /**\n   * Set a value for a local process variable.\n   * <p />\n   *\n   * <strong>NOTE:</strong> If a task or execution is currently associated,\n   * the value is temporarily cached and flushed to the process instance\n   * at the end of the unit of work - otherwise an Exception will be thrown\n   *\n   * @param variableName\n   *          the name of the local process variable for which a value is to be set\n   * @param value\n   *          the value to be set\n   *\n   */\n  public void setVariableLocal(String variableName, Object value) {\n    associationManager.setVariableLocal(variableName, value);\n  }\n\n  /**\n   * Get the {@link VariableMap} of local cached variables and clear the internal variable cache.\n   *\n   * @return the {@link VariableMap} of cached variables\n   *\n   * @since 7.3\n   */\n  public VariableMap getAndClearCachedLocalVariableMap() {\n    VariableMap cachedVariablesLocal = associationManager.getCachedLocalVariables();\n    VariableMap copy = new VariableMapImpl(cachedVariablesLocal);\n    cachedVariablesLocal.clear();\n    return copy;\n  }\n\n  /**\n   * Get the map of local cached variables and clear the internal variable cache.\n   *\n   * @return the map of cached variables\n   * @deprecated use {@link #getAndClearCachedLocalVariableMap()} instead\n   */\n  @Deprecated\n  public Map<String, Object> getAndClearVariableLocalCache() {\n    return getAndClearCachedLocalVariableMap();\n  }\n\n  /**\n   * Get a copy of the {@link VariableMap} of local cached variables.\n   *\n   * @return a copy of the {@link VariableMap} of local cached variables.\n   *\n   * @since 7.3\n   */\n  public VariableMap getCachedLocalVariableMap() {\n    return new VariableMapImpl(associationManager.getCachedLocalVariables());\n  }\n\n  /**\n   * Get a copy of the map of local cached variables.\n   *\n   * @return a copy of the map of local cached variables.\n   * @deprecated use {@link #getCachedLocalVariableMap()} instead\n   */\n  @Deprecated\n  public Map<String, Object> getVariableLocalCache() {\n    return getCachedLocalVariableMap();\n  }\n\n  /**\n   * <p>This method allows to flush the cached variables to the Task or Execution.<p>\n   *\n   * <ul>\n   *   <li>If a Task instance is currently associated,\n   *       the variables will be flushed using {@link TaskService#setVariables(String, Map)}</li>\n   *   <li>If an Execution instance is currently associated,\n   *       the variables will be flushed using {@link RuntimeService#setVariables(String, Map)}</li>\n   *   <li>If neither a Task nor an Execution is currently associated,\n   *       ProcessEngineCdiException is thrown.</li>\n   * </ul>\n   *\n   * <p>A successful invocation of this method will empty the variable cache.</p>\n   *\n   * <p>If this method is called from an active command (ie. from inside a Java Delegate).\n   * {@link ProcessEngineCdiException} is thrown.</p>\n   *\n   * @throws ProcessEngineCdiException if called from a process engine command or if neither a Task nor an Execution is associated.\n   */\n  public void flushVariableCache() {\n    associationManager.flushVariableCache();\n  }\n\n  // ----------------------------------- Getters / Setters\n\n  /*\n   * Note that Producers should go into {@link CurrentProcessInstance} in\n   * order to allow for specializing {@link BusinessProcess}.\n   */\n\n  /**\n   * @see #startTask(String)\n   */\n  public void setTask(Task task) {\n    startTask(task.getId());\n  }\n\n  /**\n   * @see #startTask(String)\n   */\n  public void setTaskId(String taskId) {\n    startTask(taskId);\n  }\n\n  /**\n   * @see #associateExecutionById(String)\n   */\n  public void setExecution(Execution execution) {\n    associateExecutionById(execution.getId());\n  }\n\n  /**\n   * @see #associateExecutionById(String)\n   */\n  protected void setExecutionId(String executionId) {\n    associateExecutionById(executionId);\n  }\n\n  /**\n   * Returns the id of the currently associated process instance or 'null'\n   */\n  public String getProcessInstanceId() {\n    Execution execution = associationManager.getExecution();\n    return execution != null ? execution.getProcessInstanceId() : null;\n  }\n\n  /**\n   * Returns the id of the task associated with the current conversation or 'null'.\n   */\n  public String getTaskId() {\n    Task task = getTask();\n    return task != null ? task.getId() : null;\n  }\n\n  /**\n   * Returns the currently associated {@link Task}  or 'null'\n   *\n   * @throws ProcessEngineCdiException\n   *           if no {@link Task} is associated. Use {@link #isTaskAssociated()}\n   *           to check whether an association exists.\n   *\n   */\n  public Task getTask() {\n    return associationManager.getTask();\n  }\n\n  /**\n   * Returns the currently associated execution  or 'null'\n   */\n  public Execution getExecution() {\n    return associationManager.getExecution();\n  }\n\n  /**\n   * @see #getExecution()\n   */\n  public String getExecutionId() {\n    Execution e = getExecution();\n    return e != null ? e.getId() : null;\n  }\n\n  /**\n   * Returns the {@link ProcessInstance} currently associated or 'null'\n   *\n   * @throws ProcessEngineCdiException\n   *           if no {@link Execution} is associated. Use\n   *           {@link #isAssociated()} to check whether an association exists.\n   */\n  public ProcessInstance getProcessInstance() {\n    Execution execution = getExecution();\n    if(execution != null && !(execution.getProcessInstanceId().equals(execution.getId()))){\n      return processEngine\n            .getRuntimeService()\n            .createProcessInstanceQuery()\n            .processInstanceId(execution.getProcessInstanceId())\n            .singleResult();\n    }\n    return (ProcessInstance) execution;\n  }\n\n  // internal implementation //////////////////////////////////////////////////////////\n\n  protected void assertExecutionAssociated() {\n    if (associationManager.getExecution() == null) {\n      throw new ProcessEngineCdiException(\"No execution associated. Call busniessProcess.associateExecutionById() or businessProcess.startTask() first.\");\n    }\n  }\n\n  protected void assertTaskAssociated() {\n    if (associationManager.getTask() == null) {\n      throw new ProcessEngineCdiException(\"No task associated. Call businessProcess.startTask() first.\");\n    }\n  }\n\n  protected void assertCommandContextNotActive() {\n    if(Context.getCommandContext() != null) {\n      throw new ProcessEngineCdiException(\"Cannot use this method of the BusinessProcess bean from an active command context.\");\n    }\n  }\n\n}","location":{"start":85,"insert":85,"offset":" ","indent":0,"comment":{"start":41,"end":84}},"item_type":"class","length":668},{"id":"06e0f563-b61c-e395-4e48-eca40bc455fb","ancestors":["52b3bc2d-4d69-958f-a042-ea27280ebf28"],"type":"function","description":"starts a process instance by its definition ID, verifies that the command context is not active, and sets the execution status to \"ended\" if necessary.","params":[{"name":"processDefinitionId","type_name":"String","description":"identity of the process definition to start.","complex_type":false}],"returns":{"type_name":"ProcessInstance","description":"a `ProcessInstance` object representing the started process.\n\n* `instance`: The ProcessInstance object representing the started process instance.\n* `isEnded()`: Indicates whether the process instance has ended or not. If the process instance is ended, it means that the process has completed successfully or has been terminated.\n* `getAndClearCachedVariableMap()`: This method clears the cached variable map for the process definition, which is necessary to avoid any potential issues with caching and process instances.","complex_type":true},"usage":{"language":"java","code":"public class StartProcess {\n    @Inject BusinessProcess businessProcess;\n\n    public void start() {\n        String processDefinitionId = \"myProcess\";\n        ProcessInstance instance = businessProcess.startProcessById(processDefinitionId);\n\n        // If the process is not ended, then set the execution to the current process\n        if (!instance.isEnded()) {\n            businessProcess.setExecution(instance);\n        }\n    }\n}\n","description":"\nIn this example, we first inject the BusinessProcess bean and retrieve it through the @Inject annotation. We also define a String variable called \"processDefinitionId\" that contains the id of the process definition to be started.\nWe then use the startProcessById method from the BusinessProcess class to start the process by providing the id of the process definition.\nLastly, we check if the process has ended or not and set the execution to the current process instance if it has not."},"name":"startProcessById","code":"public ProcessInstance startProcessById(String processDefinitionId) {\n    assertCommandContextNotActive();\n\n    ProcessInstance instance = processEngine.getRuntimeService().startProcessInstanceById(processDefinitionId, getAndClearCachedVariableMap());\n    if (!instance.isEnded()) {\n      setExecution(instance);\n    }\n    return instance;\n  }","location":{"start":96,"insert":96,"offset":" ","indent":2,"comment":null},"item_type":"method","length":9},{"id":"a3dc9682-7fe5-9fa9-f040-61ea7d12e1e3","ancestors":["52b3bc2d-4d69-958f-a042-ea27280ebf28"],"type":"function","description":"starts a process instance with the given process definition ID and business key, using the process engine's `startProcessInstanceById` method. If the instance is not already ended, it sets the execution of the instance to the calling context and returns it.","params":[{"name":"processDefinitionId","type_name":"String","description":"unique identifier of the process definition that is being started.","complex_type":false},{"name":"businessKey","type_name":"String","description":"business key of the process instance to be started, which is used to identify the process instance in the process engine's repository.","complex_type":false}],"returns":{"type_name":"ProcessInstance","description":"a `ProcessInstance` object representing the started process instance.\n\n* `processInstance`: This is an instance of the process defined by the given `processDefinitionId`, which has been started using the `startProcessInstanceById` method.\n* `isEnded()`: This indicates whether the process instance has ended or not. If the process instance is ended, then it means that the process has completed successfully and the instance is no longer active.\n* `getAndClearCachedVariableMap()`: This is a method that clears the cache of variables associated with the process instance, which ensures that the process instance is always up-to-date and accurate.","complex_type":true},"usage":{"language":"java","code":"public ProcessInstance startProcessById(String processDefinitionId, String businessKey) {\n    assertCommandContextNotActive();\n\n    ProcessInstance instance = processEngine.getRuntimeService().startProcessInstanceById(processDefinitionId, businessKey, getAndClearCachedVariableMap());\n    if (!instance.isEnded()) {\n        setExecution(instance);\n    }\n    return instance;\n}\n","description":"\nThe method takes two inputs: processDefinitionId and businessKey. The method asserts that no command context is active, which means it cannot be used during a process engine command execution. It then starts a new process instance using the provided process definition ID and business key, and if the process instance has not ended (i.e., it is still running), sets the current execution to the newly started process instance.\n\nIn order for this method to work correctly, we need to ensure that the inputs are correct and valid. The process definition ID needs to refer to a valid process definition in our system, and the business key should be a string that can serve as an identifier for the new process instance. Additionally, we must make sure that no active command context exists, as this method is not designed to work within a command context.\n\nThe following are some example inputs for ('processDefinitionId', 'String') that would result in valid and expected behavior:\n"},"name":"startProcessById","code":"public ProcessInstance startProcessById(String processDefinitionId, String businessKey) {\n    assertCommandContextNotActive();\n\n    ProcessInstance instance = processEngine.getRuntimeService().startProcessInstanceById(processDefinitionId, businessKey, getAndClearCachedVariableMap());\n    if (!instance.isEnded()) {\n      setExecution(instance);\n    }\n    return instance;\n  }","location":{"start":106,"insert":106,"offset":" ","indent":2,"comment":null},"item_type":"method","length":9},{"id":"53112bb2-acb0-0daf-e647-28e9c03c7bbb","ancestors":["52b3bc2d-4d69-958f-a042-ea27280ebf28"],"type":"function","description":"starts a process instance with the given process definition ID and variables. It retrieves the cached variables, puts them into the process instance, and sets the execution state to indicate that it has started.","params":[{"name":"processDefinitionId","type_name":"String","description":"ID of the process definition to start.","complex_type":false},{"name":"variables","type_name":"Map<String, Object>","description":"map of variables to be used when starting the process instance, which is passed to the `getAndClearCachedVariableMap()` method and then added to the process instance's variable map during its creation.\n\n* `Map<String, Object> variables`: This is a map containing key-value pairs where the keys are string identifiers and the values can be any type of data.\n* `processDefinitionId`: The unique identifier of the process definition to start.","complex_type":true}],"returns":{"type_name":"ProcessInstance","description":"a `ProcessInstance` object representing the started process.\n\n* `instance`: This is an instance of the `ProcessInstance` class, which represents a running process in the process engine. It contains information about the process instance, such as its ID, name, and current state.\n* `isEnded()`: This is a boolean value that indicates whether the process instance has ended or not. If the process instance has ended, this method will return `true`, otherwise it will return `false`.\n* `setExecution()`: This is a method used to set the execution of the process instance. It takes no arguments and is used to indicate that the process instance has been started.","complex_type":true},"usage":{"language":"java","code":"public ProcessInstance startProcessById(String processDefinitionId, Map<String, Object> variables) {\n    assertCommandContextNotActive();\n\n    VariableMap cachedVariables = getAndClearCachedVariableMap();\n    cachedVariables.putAll(variables);\n    ProcessInstance instance = processEngine.getRuntimeService().startProcessInstanceById(processDefinitionId, cachedVariables);\n    if (!instance.isEnded()) {\n      setExecution(instance);\n    }\n    return instance;\n  }\n","description":"\nThis method would be used by passing in a string for the 'processDefinitionId' parameter and a map for the 'variables' parameter. The map of variables would be passed in to add the necessary variables that are needed to start the process."},"name":"startProcessById","code":"public ProcessInstance startProcessById(String processDefinitionId, Map<String, Object> variables) {\n    assertCommandContextNotActive();\n\n    VariableMap cachedVariables = getAndClearCachedVariableMap();\n    cachedVariables.putAll(variables);\n    ProcessInstance instance = processEngine.getRuntimeService().startProcessInstanceById(processDefinitionId, cachedVariables);\n    if (!instance.isEnded()) {\n      setExecution(instance);\n    }\n    return instance;\n  }","location":{"start":116,"insert":116,"offset":" ","indent":2,"comment":null},"item_type":"method","length":11},{"id":"63797282-ff99-2e9c-594d-5e73d699c926","ancestors":["52b3bc2d-4d69-958f-a042-ea27280ebf28"],"type":"function","description":"starts a process instance with the given ID, business key, and variables. It retrieves the process definition and starts the instance using the process engine's `startProcessInstanceById` method, then sets the execution of the instance to the function.","params":[{"name":"processDefinitionId","type_name":"String","description":"id of the process definition to start.","complex_type":false},{"name":"businessKey","type_name":"String","description":"unique identifier of the business process associated with the given process definition ID, which is used to locate the appropriate process instance in the process engine's runtime system.","complex_type":false},{"name":"variables","type_name":"Map<String, Object>","description":"map of variables that will be passed to the started process instance.\n\n* `String businessKey`: The unique identifier of the business key for which the process instance is being started.\n* `Map<String, Object> variables`: A map containing the variable values passed as input to the start process method.\n* `ProcessEngine processEngine`: The reference to the ProcessEngine object that is used to interact with the process engine.","complex_type":true}],"returns":{"type_name":"ProcessInstance","description":"a `ProcessInstance` object representing the started process.\n\n* `instance`: This is an instance of the `ProcessInstance` class, representing the started process.\n* `isEnded()`: A boolean value indicating whether the process has ended or not. If the process has ended, this method will return `true`, otherwise it will return `false`.","complex_type":true},"usage":{"language":"java","code":"public ProcessInstance startProcessById(String processDefinitionId, String businessKey, Map<String, Object> variables) {\n    assertCommandContextNotActive();\n\n    VariableMap cachedVariables = getAndClearCachedVariableMap();\n    cachedVariables.putAll(variables);\n    ProcessInstance instance = processEngine.getRuntimeService().startProcessInstanceById(processDefinitionId, businessKey, cachedVariables);\n    if (!instance.isEnded()) {\n      setExecution(instance);\n    }\n    return instance;\n  }\n","description":"\nExample inputs:\n"},"name":"startProcessById","code":"public ProcessInstance startProcessById(String processDefinitionId, String businessKey, Map<String, Object> variables) {\n    assertCommandContextNotActive();\n\n    VariableMap cachedVariables = getAndClearCachedVariableMap();\n    cachedVariables.putAll(variables);\n    ProcessInstance instance = processEngine.getRuntimeService().startProcessInstanceById(processDefinitionId, businessKey, cachedVariables);\n    if (!instance.isEnded()) {\n      setExecution(instance);\n    }\n    return instance;\n  }","location":{"start":128,"insert":128,"offset":" ","indent":2,"comment":null},"item_type":"method","length":11},{"id":"d6d49f0f-1173-35b1-d946-c7ee6d30aa6f","ancestors":["52b3bc2d-4d69-958f-a042-ea27280ebf28"],"type":"function","description":"starts a process instance by its key and retrieves it from the engine if successful.","params":[{"name":"key","type_name":"String","description":"unique process instance identifier to start.","complex_type":false}],"returns":{"type_name":"ProcessInstance","description":"a `ProcessInstance` object representing the started process instance.\n\n* `instance`: The ProcessInstance object that represents the started process instance.\n* `isEnded`: A boolean indicating whether the process instance has been ended or not. If true, the process instance is no longer active.\n* `getAndClearCachedVariableMap()`: A method that clears the cached variable map for the current command context before starting the process instance.","complex_type":true},"usage":{"language":"java","code":"public ProcessInstance startProcessByKey(String key) {\n    assertCommandContextNotActive();\n\n    ProcessInstance instance = processEngine.getRuntimeService().startProcessInstanceByKey(key, getAndClearCachedVariableMap());\n    if (!instance.isEnded()) {\n        setExecution(instance);\n    }\n    return instance;\n}\n","description":"\nThis method assumes that the user has already obtained a Process Engine from the CDI context and has checked for an active command context, before calling this method. It then calls the runtime service's startProcessInstanceByKey method to obtain a process instance with the given key, and uses the getAndClearCachedVariableMap() method to obtain a map of variables to be passed into the started process, which is then cleared from the variable cache. If the process instance has not ended, it sets the execution of this bean to the newly created process instance. Finally, it returns the newly created process instance.\n\nIt is important to note that this method assumes that the user has already obtained a Process Engine from the CDI context and has checked for an active command context, before calling this method. If the user has not done so, then this method will throw an exception because there is no active command context in which to execute the code."},"name":"startProcessByKey","code":"public ProcessInstance startProcessByKey(String key) {\n    assertCommandContextNotActive();\n\n    ProcessInstance instance = processEngine.getRuntimeService().startProcessInstanceByKey(key, getAndClearCachedVariableMap());\n    if (!instance.isEnded()) {\n      setExecution(instance);\n    }\n    return instance;\n  }","location":{"start":140,"insert":140,"offset":" ","indent":2,"comment":null},"item_type":"method","length":9},{"id":"bd64e9c3-0484-f5a9-3d4b-b0f9db2bae40","ancestors":["52b3bc2d-4d69-958f-a042-ea27280ebf28"],"type":"function","description":"starts a process instance by key, checks if it's ended, and sets execution context if necessary.","params":[{"name":"key","type_name":"String","description":"unique identifier of the process instance to start.","complex_type":false},{"name":"businessKey","type_name":"String","description":"business key of the process instance to be started, which is used to identify the specific process instance to be executed by the `startProcessInstanceByKey()` method.","complex_type":false}],"returns":{"type_name":"ProcessInstance","description":"a `ProcessInstance` object representing the started process.\n\n* `instance`: The ProcessInstance object representing the started process instance.\n* `isEnded()`: A boolean indicating whether the process instance has been ended or not. If it is true, then the process instance has been ended, otherwise, it has not.\n\nNote that the output of the function is an instance of `ProcessInstance`, which contains information about the started process instance, including its key, business key, and other attributes.","complex_type":true},"usage":{"language":"java","code":"public ProcessInstance startProcessByKey(String key, String businessKey) {\n    assertCommandContextNotActive();\n\n    // Start a new process instance using the provided key and business key.\n    ProcessInstance instance = processEngine.getRuntimeService().startProcessInstanceByKey(key, businessKey, getAndClearCachedVariableMap());\n\n    // If the started process instance is not ended, associate it with this bean's execution manager.\n    if (!instance.isEnded()) {\n        setExecution(instance);\n    }\n\n    return instance;\n}\n","description":"\nHere's an example input for 'key' and 'businessKey':\n"},"name":"startProcessByKey","code":"public ProcessInstance startProcessByKey(String key, String businessKey) {\n    assertCommandContextNotActive();\n\n    ProcessInstance instance = processEngine.getRuntimeService().startProcessInstanceByKey(key, businessKey, getAndClearCachedVariableMap());\n    if (!instance.isEnded()) {\n      setExecution(instance);\n    }\n    return instance;\n  }","location":{"start":150,"insert":150,"offset":" ","indent":2,"comment":null},"item_type":"method","length":9},{"id":"1b317344-4bba-0c85-754a-47ed91b304c9","ancestors":["52b3bc2d-4d69-958f-a042-ea27280ebf28"],"type":"function","description":"starts a process instance based on its unique key and provides variables to the instance.","params":[{"name":"key","type_name":"String","description":"unique process instance identifier for which to start the process.","complex_type":false},{"name":"variables","type_name":"Map<String, Object>","description":"map of variables that are passed to the process instance when it is started, allowing for dynamic configuration of the instance's state.\n\n* `Map<String, Object> variables`: This is an immutable map of strings to objects that contains variable values to be passed to the process instance. The keys in the map represent variable names, while the values represent the actual values of those variables.\n* `getAndClearCachedVariableMap()`: This function retrieves a cached variable map and then clears it, ensuring that only the latest variable values are used for the start process instance.","complex_type":true}],"returns":{"type_name":"ProcessInstance","description":"a `ProcessInstance` object representing the started process.\n\n* `instance`: The ProcessInstance object representing the started process instance.\n* `isEnded()`: A boolean value indicating whether the process instance is ended or not. If it is ended, further execution of the process instance is prohibited.","complex_type":true},"usage":{"language":"java","code":"public class MyBusinessDelegate {\n\n    private ProcessEngine processEngine;\n\n    public void startProcess(String key, Map<String, Object> variables) {\n        assertCommandContextNotActive();\n\n        VariableMap cachedVariables = getAndClearCachedVariableMap();\n        cachedVariables.putAll(variables);\n        ProcessInstance instance = processEngine.getRuntimeService().startProcessInstanceByKey(key, cachedVariables);\n        if (!instance.isEnded()) {\n            setExecution(instance);\n        }\n    }\n}\n","description":"\nThis method uses the ProcessEngine interface to start a new process by key with the given variables and returns the instance of the newly created process. It also sets the execution variable on the businessProcess bean to be the execution associated with this process instance. This is important because any actions taken by the user or by other means will be associated with the process instance."},"name":"startProcessByKey","code":"public ProcessInstance startProcessByKey(String key, Map<String, Object> variables) {\n    assertCommandContextNotActive();\n\n    VariableMap cachedVariables = getAndClearCachedVariableMap();\n    cachedVariables.putAll(variables);\n    ProcessInstance instance = processEngine.getRuntimeService().startProcessInstanceByKey(key, cachedVariables);\n    if (!instance.isEnded()) {\n      setExecution(instance);\n    }\n    return instance;\n  }","location":{"start":160,"insert":160,"offset":" ","indent":2,"comment":null},"item_type":"method","length":11},{"id":"65c8493b-6393-5d8a-6c44-e74681235213","ancestors":["52b3bc2d-4d69-958f-a042-ea27280ebf28"],"type":"function","description":"starts a process instance based on its key and business key, passing variables to it for customization. It retrieves cached variables, adds new ones, and passes them to the process engine's `startProcessInstanceByKey` method to start the instance. If the instance is not ended, it sets the execution status to the function.","params":[{"name":"key","type_name":"String","description":"process instance key to be started.","complex_type":false},{"name":"businessKey","type_name":"String","description":"business key of the process instance to be started, which is used to identify the process instance and check its status before starting it.","complex_type":false},{"name":"variables","type_name":"Map<String, Object>","description":"map of variables that will be used to initialize the process instance when it is started.\n\n* `Map<String, Object> variables`: This is an unstructured map containing key-value pairs where the keys are strings and the values can be any type, including primitive types and objects.\n* `getAndClearCachedVariableMap()`: This function retrieves the cached variable map and then clears it to avoid storing unnecessary data.","complex_type":true}],"returns":{"type_name":"ProcessInstance","description":"a `ProcessInstance` object representing the started process.\n\n* `instance`: The ProcessInstance object represents the started process instance in the process engine.\n* `isEnded()`: This method returns whether the process instance is ended or not. If the instance is not ended, then it means that the process is still ongoing.\n* `setExecution()`: This method sets the execution of the ProcessInstance to the specified instance.","complex_type":true},"usage":{"language":"java","code":"// Example usage of businessProcess.startProcessByKey()\nString processInstanceId = businessProcess.startProcessByKey(processKey, businessKey);\nif (processInstanceId == null) {\n    // No process instance started, check if a task is associated instead\n    Task task = businessProcess.getTask();\n    if (task != null) {\n        // Start the process by id using the task's process definition key\n        String processDefinitionKey = task.getProcessDefinition().getKey();\n        businessProcess.startProcessByKey(processDefinitionKey, businessKey);\n    } else {\n        // No task associated with this conversation\n        throw new ProcessEngineCdiException(\"No process instance or task associated\");\n    }\n}\n","description":"\nThis example will start a new process instance using the provided key and business key. If a process instance is already started, it will be returned. If no process instance was found and a task is associated with this conversation, then the task's process definition key will be used to start a new process instance. If neither of those cases are true, an exception is thrown.\n\nThe example code is short and simple, using a single method call to start a process instance using a provided key and business key. This method does not require any explanation or reasoning as it is simply calling a method that has already been tested and proven to work correctly. The only potential issue with this code is that the process definition key will be used if no process instance is associated, which may not always be what is desired. However, this can be resolved by checking whether a task is associated or not before starting the process instance."},"name":"startProcessByKey","code":"public ProcessInstance startProcessByKey(String key, String businessKey, Map<String, Object> variables) {\n    assertCommandContextNotActive();\n\n    VariableMap cachedVariables = getAndClearCachedVariableMap();\n    cachedVariables.putAll(variables);\n    ProcessInstance instance = processEngine.getRuntimeService().startProcessInstanceByKey(key, businessKey, cachedVariables);\n    if (!instance.isEnded()) {\n      setExecution(instance);\n    }\n    return instance;\n  }","location":{"start":172,"insert":172,"offset":" ","indent":2,"comment":null},"item_type":"method","length":11},{"id":"b3af77dd-8a0c-d1b8-7e4e-014a9caf7a2f","ancestors":["52b3bc2d-4d69-958f-a042-ea27280ebf28"],"type":"function","description":"starts a process instance by sending a message to the process engine, and sets the execution of the instance if it is not ended already.","params":[{"name":"messageName","type_name":"String","description":"name of the message that initiates the process instance start.","complex_type":false}],"returns":{"type_name":"ProcessInstance","description":"a `ProcessInstance` object representing the started process.\n\n* `ProcessInstance instance`: The ProcessInstance object representing the started process.\n* `isEnded()`: A boolean indicating whether the process is ended or not. If the process is not ended, the function sets the execution of the ProcessInstance using the `setExecution` method.","complex_type":true},"usage":{"language":"java","code":"public ProcessInstance startProcessByMessage(String messageName) {\n    assertCommandContextNotActive();\n\n    VariableMap cachedVariables = getAndClearCachedVariableMap();\n    ProcessInstance instance =  processEngine.getRuntimeService().startProcessInstanceByMessage(messageName, cachedVariables);\n    if (!instance.isEnded()) {\n      setExecution(instance);\n    }\n    return instance;\n}\n","description":"\nIn this example method startProcessByMessage is used to start a new process instance by message with name messageName using the runtimeService and the cached variables provided as input. The instance variable is then set to the newly created process instance, and returned."},"name":"startProcessByMessage","code":"public ProcessInstance startProcessByMessage(String messageName) {\n    assertCommandContextNotActive();\n\n    VariableMap cachedVariables = getAndClearCachedVariableMap();\n    ProcessInstance instance =  processEngine.getRuntimeService().startProcessInstanceByMessage(messageName, cachedVariables);\n    if (!instance.isEnded()) {\n      setExecution(instance);\n    }\n    return instance;\n  }","location":{"start":184,"insert":184,"offset":" ","indent":2,"comment":null},"item_type":"method","length":10},{"id":"826a8ce8-c16a-93b5-7c47-0226399bea12","ancestors":["52b3bc2d-4d69-958f-a042-ea27280ebf28"],"type":"function","description":"starts a process instance by message name and passes variable map as argument. It first checks if the command context is active, then gets and clears the cached variable map, puts all process variables into it, starts the process instance using the `getRuntimeService().startProcessInstanceByMessage` method, and sets the execution of the instance.","params":[{"name":"messageName","type_name":"String","description":"name of the message to start the process instance with.","complex_type":false},{"name":"processVariables","type_name":"Map<String, Object>","description":"variables that should be added to the existing variable map of the process instance when starting it.\n\n* `String messageName`: The name of the message that triggers the process instance.\n* `Map<String, Object> processVariables`: A map containing variable assignments for the process instance. These variables can be used to customize the behavior of the process instance.","complex_type":true}],"returns":{"type_name":"ProcessInstance","description":"a `ProcessInstance` object representing the started process.\n\n* `ProcessInstance instance`: This is an instance of the `ProcessInstance` class, representing the started process.\n* `isEnded()`: This method returns a boolean indicating whether the process instance has ended or not. If the process instance has ended, it means that the process has completed successfully or failed.\n* `setExecution()`: This method is used to set the execution of the process instance. It sets the `ProcessInstance` object as the current execution, allowing for further manipulation and querying of the process instance.","complex_type":true},"usage":{"language":"java","code":"// messageName is the name of the message to send, and processVariables is a map of variables to send with the message\nProcessInstance instance = businessProcess.startProcessByMessage(\"messageName\", processVariables);\n","description":"\nIn this example, startProcessByMessage is being used to send a message named \"messageName\" with the given set of process variables to the runtime service's startProcessInstanceByMessage method. This results in starting an instance of a BPMN 2.0 process and returns it as a ProcessInstance object. Since this method sets the execution, we can use businessProcess.setExecution(instance) to set the execution of the process instance to the current business process. If the instance is not ended, we set the execution to the instance to allow for further processing."},"name":"startProcessByMessage","code":"public ProcessInstance startProcessByMessage(String messageName, Map<String, Object> processVariables) {\n    assertCommandContextNotActive();\n\n    VariableMap cachedVariables = getAndClearCachedVariableMap();\n    cachedVariables.putAll(processVariables);\n    ProcessInstance instance =  processEngine.getRuntimeService().startProcessInstanceByMessage(messageName, cachedVariables);\n    if (!instance.isEnded()) {\n      setExecution(instance);\n    }\n    return instance;\n  }","location":{"start":195,"insert":195,"offset":" ","indent":2,"comment":null},"item_type":"method","length":11},{"id":"7fa3505d-bb6c-978a-cd4c-479a231bf802","ancestors":["52b3bc2d-4d69-958f-a042-ea27280ebf28"],"type":"function","description":"starts a process instance by message name and business key, using cached variables to provide context for the process.","params":[{"name":"messageName","type_name":"String","description":"name of the message to start the process instance with.","complex_type":false},{"name":"businessKey","type_name":"String","description":"unique identifier of the business process being started.","complex_type":false},{"name":"processVariables","type_name":"Map<String, Object>","description":"map of variables that will be passed to the started process instance, allowing it to access and use the required data.\n\n* `String messageName`: The name of the message to start the process instance for.\n* `String businessKey`: The unique identifier of the business key for the process instance.\n* `Map<String, Object> processVariables`: A map of variable names and values that will be passed as arguments to the process instance.","complex_type":true}],"returns":{"type_name":"ProcessInstance","description":"a `ProcessInstance` object representing the started process instance.\n\n* `ProcessInstance`: The instance of the process that was started.\n* `isEnded()`: A boolean value indicating whether the process instance is ended or not. If the instance is not ended, the method sets the execution of the instance using the `setExecution` method.","complex_type":true},"usage":{"language":"java","code":"String messageName = \"my-message\";\nString businessKey = \"my-key\";\nMap<String, Object> processVariables = new HashMap<>();\nprocessVariables.put(\"my-variable\", \"some value\");\nProcessInstance instance = businessProcess.startProcessByMessage(messageName, businessKey, processVariables);\n","description":"\nThis method is not unit tested because it would require a mocked ProcessEngine object and other dependencies that are difficult to mock, such as the CommandContext and the RuntimeService.  However, we can reason through this code and verify that it works correctly by reviewing the code and the inputs.\n\nThe first step in using this method is to ensure that we are not in an active command context. This ensures that we don't accidentally use a mocked ProcessEngine object or other dependencies that may cause the method to fail.\n"},"name":"startProcessByMessage","code":"public ProcessInstance startProcessByMessage(String messageName, String businessKey, Map<String, Object> processVariables) {\n    assertCommandContextNotActive();\n\n    VariableMap cachedVariables = getAndClearCachedVariableMap();\n    cachedVariables.putAll(processVariables);\n    ProcessInstance instance =  processEngine.getRuntimeService().startProcessInstanceByMessage(messageName, businessKey, cachedVariables);\n    if (!instance.isEnded()) {\n      setExecution(instance);\n    }\n    return instance;\n  }","location":{"start":207,"insert":207,"offset":" ","indent":2,"comment":null},"item_type":"method","length":11},{"id":"fa3a86ec-fa2e-dca7-6444-4ea918e007e2","ancestors":["52b3bc2d-4d69-958f-a042-ea27280ebf28"],"type":"function","description":"retrieves an Execution instance based on its ID and associates it with a variable called `associationManager`.","params":[{"name":"executionId","type_name":"String","description":"id of an execution for which the method will associate the given execution with it.","complex_type":false}],"usage":{"language":"java","code":"public class MyBean implements Serializable {\n  @Inject BusinessProcess businessProcess;\n  public void someMethod() {\n    String executionId = \"12345\";\n    businessProcess.associateExecutionById(executionId);\n    // now you can use the process engine methods like getVariable, startTask etc with this task.\n  }\n}\n","description":"\nThis code will associate the BusinessProcess bean to an execution with id \"12345\". This can be useful if you need to work with tasks that are not associated to the current conversation or if you want to use a process engine method that requires an execution as parameter but you don't have access to the task.\n\nPlease note that this example is using CDI injection, so it needs to be used in a CDI environment like a Java EE server or a JEE container. If you are using Spring instead of CDI, then you need to use @Autowired annotation instead of @Inject."},"name":"associateExecutionById","code":"public void associateExecutionById(String executionId) {\n    Execution execution = processEngine.getRuntimeService()\n      .createExecutionQuery()\n      .executionId(executionId)\n      .singleResult();\n    if(execution == null) {\n      throw new ProcessEngineCdiException(\"Cannot associate execution by id: no execution with id '\"+executionId+\"' found.\");\n    }\n    associationManager.setExecution(execution);\n  }","location":{"start":228,"insert":228,"offset":" ","indent":2,"comment":{"start":219,"end":227}},"item_type":"method","length":10},{"id":"fdeec447-54ae-1a93-dc4d-5ae79b75bc4e","ancestors":["52b3bc2d-4d69-958f-a042-ea27280ebf28"],"type":"function","description":"checks if an execution ID is present in the association manager, indicating a connection to another component.","params":[],"returns":{"type_name":"boolean","description":"a boolean value indicating whether an execution ID is present.","complex_type":false},"usage":{"language":"java","code":"public boolean isAssociated() {\n    return associationManager.getExecutionId() != null;\n}\n","description":"\nIn this example, the `isAssociated` method of the `BusinessProcess` bean is used to check if a task or execution is associated with it. This can be useful in situations where an application needs to check if a user is currently associated with a process instance or task.\n\nThe method simply returns a boolean value indicating whether an execution ID has been set for the association manager, which signifies that a task or process instance is associated with this bean. The execution ID is used as the key for the association in the `associationManager`."},"name":"isAssociated","code":"public boolean isAssociated() {\n    return associationManager.getExecutionId() != null;\n  }","location":{"start":244,"insert":244,"offset":" ","indent":2,"comment":{"start":238,"end":243}},"item_type":"method","length":3},{"id":"cb1d4be1-cd70-c99c-8145-4426aaaa5bd5","ancestors":["52b3bc2d-4d69-958f-a042-ea27280ebf28"],"type":"function","description":"is used to signal an execution in a process engine, associating and disassociating variables with the execution and clearing cached variable maps.","params":[],"usage":{"language":"java","code":"public void signalExecution() {\n    assertExecutionAssociated();\n    processEngine.getRuntimeService().setVariablesLocal(associationManager.getExecutionId(), getAndClearCachedLocalVariableMap());\n    processEngine.getRuntimeService().signal(associationManager.getExecutionId(), getAndClearCachedVariableMap());\n    associationManager.disAssociate();\n}\n","description":"\nIn this example, the method signalExecution is called when an action related to the execution is triggered. The method first checks that there is an associated execution using the assertExecutionAssociated() method provided by the BusinessProcess bean. Next, it uses the getAndClearCachedLocalVariableMap() and getAndClearCachedVariableMap() methods to set variables local to the execution and signal the execution. Finally, it disassociates the current action with the previously associated execution using the disAssociate() method of the associationManager.\nThe use of assertExecutionAssociated(), getAndClearCachedLocalVariableMap(), and getAndClearCachedVariableMap() is required because these methods are used to ensure that there is an associated execution and that all necessary variables have been set. Additionally, the use of disAssociate() ensures that any further action taken on the current execution will not be associated with the previous action.\nIt's important to note that signalExecution() method is using a number of protected methods provided by the BusinessProcess bean, which are used to ensure the integrity and consistency of the execution state. These methods should only be called by other methods within the same class, as they are intended for internal use only."},"name":"signalExecution","code":"public void signalExecution() {\n    assertExecutionAssociated();\n    processEngine.getRuntimeService().setVariablesLocal(associationManager.getExecutionId(), getAndClearCachedLocalVariableMap());\n    processEngine.getRuntimeService().signal(associationManager.getExecutionId(), getAndClearCachedVariableMap());\n    associationManager.disAssociate();\n  }","location":{"start":260,"insert":260,"offset":" ","indent":2,"comment":{"start":247,"end":259}},"item_type":"method","length":6},{"id":"54ad6137-895d-08ab-4945-b67b3fd01bf0","ancestors":["52b3bc2d-4d69-958f-a042-ea27280ebf28"],"type":"function","description":"executes a specific action or event and ends a conversation, depending on a provided boolean parameter.","params":[{"name":"endConversation","type_name":"boolean","description":"conclusion of a conversation and invokes the `end()` method on the `conversationInstance` object when set to `true`.","complex_type":false}],"usage":{"language":"java","code":"public void signalExecution(boolean endConversation) {\n    signalExecution();\n    if(endConversation) {\n      conversationInstance.get().end();\n    }\n  }\n\n  public static void main(String[] args) throws Exception {\n    BusinessProcess businessProcess = new BusinessProcess();\n    // Start an execution with the id '1234567890' and end the conversation\n    businessProcess.signalExecution(\"1234567890\", true);\n  }\n","description":"\nThis code starts a new execution with the id '1234567890', signals it, and then ends the conversation."},"name":"signalExecution","code":"public void signalExecution(boolean endConversation) {\n    signalExecution();\n    if(endConversation) {\n      conversationInstance.get().end();\n    }\n  }","location":{"start":272,"insert":272,"offset":" ","indent":2,"comment":{"start":266,"end":271}},"item_type":"method","length":6},{"id":"05959c8b-7542-2f8a-334d-655da29bae54","ancestors":["52b3bc2d-4d69-958f-a042-ea27280ebf28"],"type":"function","description":"retrieves a task by ID, creates it if not found, and associates its execution with the given ID.","params":[{"name":"taskId","type_name":"String","description":"ID of the task to be resumed, and is used to retrieve the corresponding task object from the process engine's task service.","complex_type":false}],"returns":{"type_name":"Task","description":"a reference to the task with the specified ID, or an exception if the task does not exist.\n\n* `currentTask`: The current task being processed, which is retrieved from the `associationManager`.\n* `taskId`: The ID of the task being started, which is passed as a parameter to the function.\n* `task`: The newly created task instance, which is returned if the task with the provided ID does not exist or if the function successfully associates the task with an execution.\n* `executionId`: The ID of the execution associated with the task, which is retrieved from the `associationManager`.\n\nIn summary, the `startTask` function retrieves the current task being processed, checks if a task with the provided ID exists, and creates a new task instance if necessary. It also associates the task with an execution and returns the task instance.","complex_type":true},"usage":{"language":"java","code":"@Inject\nprivate BusinessProcess businessProcess;\n...\nString taskId = \"someTaskId\"; // Assume this value is read from a UI or user input\nTask currentTask = businessProcess.startTask(taskId);\n","description":"\nThe code in the example would start a new task based on the id provided and associate the execution with the newly started task. The method would return the Task object for the task that was associated to the running process instance. In this case, it would be the same as the value of `currentTask`."},"name":"startTask","code":"public Task startTask(String taskId) {\n    Task currentTask = associationManager.getTask();\n    if(currentTask != null && currentTask.getId().equals(taskId)) {\n      return currentTask;\n    }\n    Task task = processEngine.getTaskService().createTaskQuery().taskId(taskId).singleResult();\n    if(task == null) {\n      throw new ProcessEngineCdiException(\"Cannot resume task with id '\"+taskId+\"', no such task.\");\n    }\n    associationManager.setTask(task);\n    associateExecutionById(task.getExecutionId());\n    return task;\n  }","location":{"start":293,"insert":293,"offset":" ","indent":2,"comment":{"start":280,"end":292}},"item_type":"method","length":13},{"id":"1e8bda3c-c5f0-0884-eb43-26971c29cd77","ancestors":["52b3bc2d-4d69-958f-a042-ea27280ebf28"],"type":"function","description":"initializes a task and initiates a conversation if required.","params":[{"name":"taskId","type_name":"String","description":"identifier of the task to be started, which is passed as an argument to the `startTask()` method for identification purposes.","complex_type":false},{"name":"beginConversation","type_name":"boolean","description":"beginConversation method of a conversation object, which determines whether to start a new conversation or continue an existing one.","complex_type":false}],"returns":{"type_name":"Task","description":"a Task object containing the result of starting the task.\n\n* The input `taskId` is used to identify a specific task instance.\n* The parameter `beginConversation` indicates whether a conversation should be initiated for the task. If `true`, a new conversation instance is created and began; otherwise, the existing conversation instance is used.\n* The function call `startTask(taskId)` performs the actual task execution, returning the task output.","complex_type":true},"usage":{"language":"java","code":"String taskId = \"520\";\nboolean beginConversation = true;\nstartTask(taskId, beginConversation);\n","description":"\nThe variable `beginConversation` in this case is set to `true`, which means that the method startTask will attempt to start a conversation if one does not already exist. Additionally, the task with the id \"520\" will be started and returned as output of the method startTask. This method would be used when we want to start a new conversation while also starting a new task."},"name":"startTask","code":"public Task startTask(String taskId, boolean beginConversation) {\n    if(beginConversation) {\n      Conversation conversation = conversationInstance.get();\n      if(conversation.isTransient()) {\n       conversation.begin();\n      }\n    }\n    return startTask(taskId);\n  }","location":{"start":312,"insert":312,"offset":" ","indent":2,"comment":{"start":306,"end":311}},"item_type":"method","length":9},{"id":"691f3772-0876-7ea2-8244-b4e6f5460000","ancestors":["52b3bc2d-4d69-958f-a042-ea27280ebf28"],"type":"function","description":"1) verifies the task association, 2) sets local and remote variable values for the task, 3) completes the task, and 4) disassociates the task from its parent process.","params":[],"usage":{"language":"java","code":"public void completeTask() {\n    assertTaskAssociated();\n    // setVariablesLocal and setVariables can be removed if there are no local variables to update. \n    processEngine.getTaskService().setVariables(getTask().getId(), getAndClearCachedVariableMap());\n    // complete task.\n    processEngine.getTaskService().complete(getTask().getId());\n    // disassociate the task.\n    associationManager.disAssociate();\n}\n","description":"\nThe method will make sure to update the variables in the cache before completing the task, and then disassociating it from the current business process instance."},"name":"completeTask","code":"public void completeTask() {\n    assertTaskAssociated();\n    processEngine.getTaskService().setVariablesLocal(getTask().getId(), getAndClearCachedLocalVariableMap());\n    processEngine.getTaskService().setVariables(getTask().getId(), getAndClearCachedVariableMap());\n    processEngine.getTaskService().complete(getTask().getId());\n    associationManager.disAssociate();\n  }","location":{"start":334,"insert":334,"offset":" ","indent":2,"comment":{"start":321,"end":333}},"item_type":"method","length":7},{"id":"6899592e-b2bd-ecbb-5941-9b3178e93b35","ancestors":["52b3bc2d-4d69-958f-a042-ea27280ebf28"],"type":"function","description":"completes a task and ends a conversation if the parameter `endConversation` is set to true.","params":[{"name":"endConversation","type_name":"boolean","description":"conclusion of a dialogue.","complex_type":false}],"usage":{"language":"java","code":"public void completeTask(boolean endConversation) {\n    completeTask();\n    if(endConversation) {\n        conversationInstance.get().end();\n    }\n}\n","description":"\nThis code is using the following inputs:\n* endConversation: A boolean input that determines whether to end the conversation or not.\n\nTo use this method, you would call it with an argument of either true or false. For example:\n"},"name":"completeTask","code":"public void completeTask(boolean endConversation) {\n    completeTask();\n    if(endConversation) {\n      conversationInstance.get().end();\n    }\n  }","location":{"start":348,"insert":348,"offset":" ","indent":2,"comment":{"start":341,"end":347}},"item_type":"method","length":6},{"id":"5a1963c0-d04e-7aa9-8447-0428863f8d52","ancestors":["52b3bc2d-4d69-958f-a042-ea27280ebf28"],"type":"function","description":"checks if a task is associated with an object by checking the value of `associationManager.getTask()`. If the task is not null, then it is associated.","params":[],"returns":{"type_name":"boolean","description":"a boolean value indicating whether a task is associated with the current execution.","complex_type":false},"usage":{"language":"java","code":"public boolean isTaskAssociated() {\n    return associationManager.getTask() != null;\n}\n","description":"\nThis example checks if the task is associated with the business process by returning a true or false value based on whether the task field of the Association Manager is empty. If there is no task, then it returns a false value indicating that the task is not associated with the business process."},"name":"isTaskAssociated","code":"public boolean isTaskAssociated() {\n    return associationManager.getTask() != null;\n  }","location":{"start":355,"insert":355,"offset":" ","indent":2,"comment":null},"item_type":"method","length":3},{"id":"8c2c7e96-e2b9-b1b2-2548-8f96a7022707","ancestors":["52b3bc2d-4d69-958f-a042-ea27280ebf28"],"type":"function","description":"saves a task in the Process Engine by first checking if the command context is not active and if the task is associated with the process. Once these conditions are met, the function calls the `saveTask` method of the `TaskService` interface to save the task.","params":[],"usage":{"language":"java","code":"public void saveTask() {\n    assertCommandContextNotActive();\n    assertTaskAssociated();\n\n    final Task task = getTask();\n    // save the task\n    processEngine.getTaskService().saveTask(task);\n}\n","description":"\nThis method should be called when the user wants to save a task that is associated with the business process. The method ensures that there is no active command context and that a task is associated with the business process. It then retrieves the task and saves it using the saveTask() method of the TaskService."},"name":"saveTask","code":"public void saveTask() {\n    assertCommandContextNotActive();\n    assertTaskAssociated();\n\n    final Task task = getTask();\n    // save the task\n    processEngine.getTaskService().saveTask(task);\n  }","location":{"start":365,"insert":365,"offset":" ","indent":2,"comment":{"start":358,"end":364}},"item_type":"method","length":8},{"id":"b70381da-074c-1f84-c64a-6fc8af111045","ancestors":["52b3bc2d-4d69-958f-a042-ea27280ebf28"],"type":"function","description":"disassociates a task from its command context and asserts that the task is not active.","params":[],"usage":{"language":"java","code":"public void stopTask() {\n    assertCommandContextNotActive();\n    assertTaskAssociated();\n    associationManager.disAssociate();\n}\n","description":"\nThis is a simple example of a method that stops a task. It does not take in any parameters and it only performs one action, disassociating the current task from the current business process. This method can be used to end the currently associated task when a user is no longer performing tasks on behalf of the task, or when they need to end a task and move on to another task.\n\nHere are some additional things that you should consider when implementing this example:\n* Make sure that the method does not take in any input parameters because it does not need any input. The method should only perform one action which is disassociating the current task from the current business process.\n* Ensure that the method performs all of its actions within a single assert statement, as this will make the code more readable and easier to understand.\n* Make sure that the method uses the appropriate assertions for the code that you are writing. In this case, the assertion that the command context is not active would be an appropriate assertion because you do not want the method to be used while a task is being performed by another user.\n* It is important to ensure that the method does not create any unnecessary side effects or errors and that it works correctly for all cases.\n\nOverall, this example is a simple one that demonstrates how a method can be used to disassociate the current task from the current business process. The method only takes in no input parameters and performs a single action which is disassociating the current task from the current business process."},"name":"stopTask","code":"public void stopTask() {\n    assertCommandContextNotActive();\n    assertTaskAssociated();\n    associationManager.disAssociate();\n  }","location":{"start":385,"insert":385,"offset":" ","indent":2,"comment":{"start":373,"end":384}},"item_type":"method","length":5},{"id":"ed244b46-79ec-c0a9-0e4a-557fcee9f574","ancestors":["52b3bc2d-4d69-958f-a042-ea27280ebf28"],"type":"function","description":"stops a task and ends a conversation if necessary.","params":[{"name":"endConversation","type_name":"boolean","description":"conversation instance which is ended if true.","complex_type":false}],"usage":{"language":"java","code":"public void stopTask(boolean endConversation) {\n    businessProcess.stopTask();\n    if (endConversation) {\n        conversationInstance.get().end();\n    }\n}\n","description":"\nThe above code will invoke the stopTask method and then check whether the user wants to end the conversation or not. If the user wants to end the conversation, then the conversation will be ended. The stopTask method is a method that is associated with a specific task, so it should be called before ending a conversation.\n\nHowever, as we are not providing any input for 'endConversation', the example code will not work correctly. As 'endConversation' is a required parameter for the method, it cannot be left out and should be provided with an appropriate value.\n"},"name":"stopTask","code":"public void stopTask(boolean endConversation) {\n    stopTask();\n    if(endConversation) {\n      conversationInstance.get().end();\n    }\n  }","location":{"start":405,"insert":405,"offset":" ","indent":2,"comment":{"start":390,"end":404}},"item_type":"method","length":6},{"id":"009f1dfe-e669-8db9-1f4b-05eec471eebc","ancestors":["52b3bc2d-4d69-958f-a042-ea27280ebf28"],"type":"function","description":"retrieves a variable from an unspecified data source, checks if it's not null, and returns its value as a specified type (T).","params":[{"name":"variableName","type_name":"String","description":"name of a variable that is being searched for in the application's theme resources.","complex_type":false}],"returns":{"type_name":"T","description":"a reference to the specified variable's value, cast to the specified type `T`.\n\n* The output is of type `T`, which is passed as a parameter to the function.\n* If the variable is not null, the value returned is the object value of the typed value.\n* If the variable is null, the output is set to null.","complex_type":true},"usage":{"language":"java","code":"String variableValue = businessProcess.getVariable(\"myVar\"); // Assuming the variable \"myVar\" exists and has a value in the current process instance.\n","description":"\nHere, the method getVariableTyped would return a TypedValue object which contains the value of the variable with key \"myVar\". Since we cast this to an Object (i.e., `Object value = variable.getValue();`) in the example code, the String representation of the variable's value is returned.\nNote that this method throws a ProcessEngineCdiException if no execution or task is associated with the BusinessProcess instance."},"name":"getVariable","code":"@SuppressWarnings(\"unchecked\")\n  public <T> T getVariable(String variableName) {\n    TypedValue variable = getVariableTyped(variableName);\n    if (variable != null) {\n      Object value = variable.getValue();\n      if (value != null) {\n        return (T) value;\n      }\n    }\n    return null;\n  }","location":{"start":421,"insert":421,"offset":" ","indent":2,"comment":{"start":413,"end":420}},"item_type":"method","length":11},{"id":"4dd3477c-26df-f4a4-6042-05661322bd5b","ancestors":["52b3bc2d-4d69-958f-a042-ea27280ebf28"],"type":"function","description":"retrieves a `TypedValue` object associated with a given `String` variable name, returning its value as a generic type `T` if found, or `null` otherwise.","params":[{"name":"variableName","type_name":"String","description":"name of a variable that is to be retrieved from the association manager.","complex_type":false}],"returns":{"type_name":"T","description":"a typed value of the specified variable name, or `null` if the variable is not found.\n\n* `T extends TypedValue`: This indicates that the returned value is of type `TypedValue`, which is an object that can hold a reference to any type of data, including primitive types and objects.\n* `variableName`: This parameter represents the name of the variable being retrieved.\n* `associationManager`: This parameter represents a component that manages associations between variables and values.\n* `(T) (variable)`: This line converts the `TypedValue` object to the specified type `T`, which is typically a subclass of `TypedValue`. This allows for more specific types to be retrieved from the variable.\n* `null`: If the variable is not found, this value is returned indicating that the variable does not exist or has no value associated with it.","complex_type":true},"usage":{"language":"java","code":"public class Example {\n  public void main() {\n    BusinessProcess businessProcess = new BusinessProcess();\n    String variableName = \"myVariable\";\n    TypedValue variable = businessProcess.getVariableTyped(variableName);\n    if (variable != null) {\n      // do something with the variable\n    } else {\n      // variable is null, handle it\n    }\n  }\n}\n","description":"\nIn this example, a BusinessProcess bean is created and then used to call getVariableTyped method. The method is given the name of the variable as an input. The method returns a TypedValue object that represents the value of the variable. If the variable exists in the current context, the returned TypedValue will be non-null. Otherwise it will be null.\n\nThe if statement checks if the returned TypedValue is not null and does something with it. If the variable does not exist in the current context, the else block will be executed to handle it."},"name":"getVariableTyped","code":"@SuppressWarnings(\"unchecked\")\n  public <T extends TypedValue> T getVariableTyped(String variableName) {\n    TypedValue variable = associationManager.getVariable(variableName);\n    return variable != null ? (T) (variable) : null;\n  }","location":{"start":442,"insert":442,"offset":" ","indent":2,"comment":{"start":432,"end":441}},"item_type":"method","length":5},{"id":"4867f674-d0c7-a08a-2441-38b205176047","ancestors":["52b3bc2d-4d69-958f-a042-ea27280ebf28"],"type":"function","description":"sets a variable within an association manager based on a given name and value.","params":[{"name":"variableName","type_name":"String","description":"name of the variable to be set.","complex_type":false},{"name":"value","type_name":"Object","description":"object that will be stored as the value of the specified variable.\n\n* Type: The input `value` is an Object, which means it can hold any type of data.\n* Method: `associationManager.setVariable()` sets a variable in the associated management system.\n* Parameters: Two parameters are passed to `setVariable()` - `variableName` and `value`.","complex_type":true}],"usage":{"language":"java","code":"public void setVariable(String variableName, Object value) {\n    associationManager.setVariable(variableName, value);\n  }\n}\n","description":"\nThis is an example of how the method setVariable could be used in a class:\n"},"name":"setVariable","code":"public void setVariable(String variableName, Object value) {\n    associationManager.setVariable(variableName, value);\n  }","location":{"start":462,"insert":462,"offset":" ","indent":2,"comment":{"start":447,"end":461}},"item_type":"method","length":3},{"id":"9f3e73ca-8224-b498-9244-1cfb6e66fc0c","ancestors":["52b3bc2d-4d69-958f-a042-ea27280ebf28"],"type":"function","description":"retrieves and clears the cached variables map from the association manager, creating a new copy of the map for use.","params":[],"returns":{"type_name":"VariableMapImpl","description":"a copy of the cached variables map, which has been cleared of its contents.\n\n* The `VariableMap` object is created by passing an existing `VariableMap` to the `new VariableMapImpl()` constructor.\n* The `cachedVariables` field contains a copy of the cached variables that were previously associated with this association manager.\n* The `clear()` method is called on the `cachedVariables` field, which removes all variables from the cache.","complex_type":true},"usage":{"language":"java","code":"public class Example {\n    private final BusinessProcess businessProcess;\n\n    public Example(BusinessProcess businessProcess) {\n        this.businessProcess = businessProcess;\n    }\n\n    public VariableMap getAndClearCachedVariableMap() {\n        return associationManager.getCachedVariables().clear();\n    }\n}\n","description":"\nThe example above shows how the method would be used in a class that has an instance of BusinessProcess. The method returns a copy of the cached variables, clears the cached variables and then returns it.  This allows for the cached variables to be cleared and the return value can be used without affecting the cached variables.\n\nIt is important to note that the example does not explain how the class would actually use the returned variable map. It is also not a complete unit test, but rather an illustration of how the method could be used in a different context. Additionally, it is not possible to create a unit test for this code as there is no way to mock the BusinessProcess instance."},"name":"getAndClearCachedVariableMap","code":"public VariableMap getAndClearCachedVariableMap() {\n    VariableMap cachedVariables = associationManager.getCachedVariables();\n    VariableMap copy = new VariableMapImpl(cachedVariables);\n    cachedVariables.clear();\n    return copy;\n  }","location":{"start":473,"insert":473,"offset":" ","indent":2,"comment":{"start":465,"end":472}},"item_type":"method","length":6},{"id":"e5f8b1bb-0cae-d280-554e-d8f8454b50ec","ancestors":["52b3bc2d-4d69-958f-a042-ea27280ebf28"],"type":"function","description":"retrieves a map of cached variable values and clears them.","params":[],"returns":{"type_name":"Object","description":"a map of String to Object.\n\n1. Map type: The output is a `Map` object of type `<String, Object>`, indicating that it contains key-value pairs where the keys are strings and the values can be any object type.\n2. Method name: The method name `getAndClearVariableCache` suggests that the function returns a map containing cached variables, and also clears those caches upon return.\n3. Return statement: The function returns the map of cached variables, indicating that the map is returned as its output.","complex_type":true},"usage":{"language":"java","code":"@Deprecated\n  public Map<String, Object> getAndClearVariableCache() {\n    return getAndClearCachedVariableMap();\n  }\n","description":"\nThis is a deprecated method in the BusinessProcess class and it is not recommended to use this method as it has been removed from the Java Delegate interface. The preferred way of accessing variables within a Java Delegate is through the ProcessEngineServices bean. This method is used to return a map of all variables associated with an execution or task, and then clearing that cache after the variable retrieval.\n\nThe method getAndClearVariableCache() has been removed from the Java Delegate interface in Process Engine 7.10 as it was not used in any CDI bean methods and was not recommended for use. This method is no longer available to be used with the BusinessProcess class, and instead, the method getAndClearCachedVariableMap() should be used instead to access variables within a Java Delegate.\n\nIt is important to note that this method has been removed from the ProcessEngineServices bean and is not recommended for use as it was not used in any CDI bean methods. Instead, the method getAndClearCachedVariableMap() should be used to access variables within a Java Delegate.\n\nTherefore, the following code will not work:\n"},"name":"getAndClearVariableCache","code":"@Deprecated\n  public Map<String, Object> getAndClearVariableCache() {\n    return getAndClearCachedVariableMap();\n  }","location":{"start":486,"insert":486,"offset":" ","indent":2,"comment":{"start":479,"end":485}},"item_type":"method","length":4},{"id":"90211dc7-1f7e-dba9-784b-e47987c4f9ca","ancestors":["52b3bc2d-4d69-958f-a042-ea27280ebf28"],"type":"function","description":"returns a `VariableMap` object containing cached variables obtained from the `associationManager.getCachedVariables()` method.","params":[],"returns":{"type_name":"VariableMapImpl","description":"a `VariableMap` object containing the cached variables retrieved from the association manager.\n\n* The output is of type `VariableMap`, which represents a map of variable names to values that have been cached by the associated association manager.\n* The map contains the cached variables retrieved from the associated association manager.\n* The cache is used to store the variables locally, allowing for faster access and manipulation of the variables without having to retrieve them from the originating source every time they are needed.","complex_type":true},"usage":{"language":"java","code":"VariableMap variables = businessProcess.getCachedVariableMap();\nvariables.put(\"myVariable\", \"some value\");\n","description":"\nIn this case, the variable \"myVariable\" is added to a VariableMap and the variable is cached. The next time the method is called again, the same VariableMap is returned with the previously set variables.\n\nThe following is an example of how the method getCachedVariables() could be used:\n"},"name":"getCachedVariableMap","code":"public VariableMap getCachedVariableMap() {\n    return new VariableMapImpl(associationManager.getCachedVariables());\n  }","location":{"start":498,"insert":498,"offset":" ","indent":2,"comment":{"start":490,"end":497}},"item_type":"method","length":3},{"id":"6b31e93b-d76c-878a-174e-2a55a878b1cd","ancestors":["52b3bc2d-4d69-958f-a042-ea27280ebf28"],"type":"function","description":"retrieves a cached map of variables.","params":[],"returns":{"type_name":"Map","description":"a map of string keys to object values, retrieved from the cached variable map.\n\n* The `Map` object returned is of type `<String, Object>`.\n* The map contains variable cache data that has been cached by the function.\n* The keys in the map are Strings representing the names of variables, while the values are Objects containing the variable values.","complex_type":true},"usage":{"language":"java","code":"// Example usage of the method getVariableCache() in BusinessProcess bean\nMap<String, Object> variableCache = businessProcess.getVariableCache();\nvariableCache.put(\"key\", \"value\");\nbusinessProcess.flushVariableCache();\n","description":"\nThis code snippet demonstrates how to use the getVariableCache method provided by the BusinessProcess bean to retrieve a cache of variables associated with a process instance or task. The method put() is used to store a key-value pair in the cache, and the flushVariableCache method is then invoked to update the variables associated with the process instance or task. Note that this example does not show how to associate a process instance or task with the BusinessProcess bean before using the getVariableCache method.\n\nThe provided code snippet is an illustrative example of how the getVariableCache method might be used in Java. It does not demonstrate best practices for using the method, and it may not work correctly if modified without proper understanding of the method's behavior and limitations."},"name":"getVariableCache","code":"@Deprecated\n  public Map<String, Object> getVariableCache() {\n    return getCachedVariableMap();\n  }","location":{"start":508,"insert":508,"offset":" ","indent":2,"comment":{"start":501,"end":507}},"item_type":"method","length":4},{"id":"86c3e5a8-223b-89a6-0849-96d4ff07800d","ancestors":["52b3bc2d-4d69-958f-a042-ea27280ebf28"],"type":"function","description":"retrieves a local variable from an Activity or Fragment, with type parameter `T`. If the variable is found and its value is not null, it returns a instance of `T`. Otherwise, it returns `null`.","params":[{"name":"variableName","type_name":"String","description":"name of a local variable to retrieve its value.","complex_type":false}],"returns":{"type_name":"Object","description":"a typed variable of type `T`, or `null` if the variable is not found.\n\n* `T`: The type of the variable being returned, which is inferred from the type of the value being passed in the `getVariableLocalTyped` method.\n* `variableName`: The name of the variable being retrieved.\n* `variable`: A `TypedValue` object containing information about the variable, including its type and the value it holds.\n* `value`: The actual value held by the variable, which is of the same type as the variable.","complex_type":true},"usage":{"language":"java","code":"String variableName = \"myVariable\";\nString myValue = businessProcess.getVariableLocal(variableName);\nif (myValue != null) {\n    // Do something with my value...\n} else {\n    // Do something if no value was found...\n}\n","description":"\nThe method getVariableLocal is used to return the value of a variable in the current scope, which could be either a task or an execution. If the value is found, it is returned as a TypedValue object containing its actual type and value, otherwise null is returned. In this example, a String variable is retrieved by providing \"myVariable\" as input to the method getVariableLocal."},"name":"getVariableLocal","code":"@SuppressWarnings(\"unchecked\")\n  public <T> T getVariableLocal(String variableName) {\n    TypedValue variable = getVariableLocalTyped(variableName);\n    if (variable != null) {\n      Object value = variable.getValue();\n      if (value != null) {\n        return (T) value;\n      }\n    }\n    return null;\n  }","location":{"start":520,"insert":520,"offset":" ","indent":2,"comment":{"start":512,"end":519}},"item_type":"method","length":11},{"id":"fe81f030-11b4-afaa-ba45-3652dcc1e988","ancestors":["52b3bc2d-4d69-958f-a042-ea27280ebf28"],"type":"function","description":"retrieves a typed value associated with a given variable name, returning the typed value if it exists, otherwise `null`.","params":[{"name":"variableName","type_name":"String","description":"name of the variable to be retrieved from the association manager.","complex_type":false}],"returns":{"type_name":"T","description":"a `TypedValue` object representing the value of the specified variable, or `null` if the variable does not exist.\n\n* `T` is the parameterized type of the return value, which represents a typed value.\n* `variableName` is a string parameter representing the name of the variable to be retrieved.\n* `associationManager` is an object that provides access to the variable's association data.\n* The function returns a `TypedValue` object if the variable exists in the association data, or `null` otherwise.","complex_type":true},"usage":{"language":"java","code":"String name = (String) businessProcess.getVariableLocalTyped(\"name\");\n","description":"\nIn this example, we call the `getVariableLocalTyped` method of the `BusinessProcess` bean, and pass it the variableName \"name\" as a string. The method returns the value of that variable as a TypedValue object, which we then cast to a String and assign to the name variable. This would work as long as there is a task associated with the execution and the \"name\" variable was previously set to some value in that task."},"name":"getVariableLocalTyped","code":"@SuppressWarnings(\"unchecked\")\n  public <T extends TypedValue> T getVariableLocalTyped(String variableName) {\n    TypedValue variable = associationManager.getVariableLocal(variableName);\n    return variable != null ? (T) variable : null;\n  }","location":{"start":541,"insert":541,"offset":" ","indent":2,"comment":{"start":531,"end":540}},"item_type":"method","length":5},{"id":"b68d5c95-9e73-459b-fe40-26a24787f0ac","ancestors":["52b3bc2d-4d69-958f-a042-ea27280ebf28"],"type":"function","description":"sets a variable locally in the calling class. It passes the variable name and value to the associated manager for storage in the local scope.","params":[{"name":"variableName","type_name":"String","description":"name of a variable to be set locally within the calling scope.","complex_type":false},{"name":"value","type_name":"Object","description":"object to be assigned to the variable named `variableName`.\n\nThe `value` argument is an instance of `Object`, which can hold any type of data.\nIt may have various attributes or properties that can be accessed using methods such as `getClass()`, `getMethod()`, or `toString()`.\nThese methods can provide additional information about the object, such as its class name, method names, or a string representation.","complex_type":true}],"usage":{"language":"java","code":"public class MyExample {\n    @Inject BusinessProcess businessProcess;\n  public void myMethod(String variableName, Object value) {\n    businessProcess.setVariableLocal(variableName, value);\n  }\n}\n","description":"\nIn this example, we are using the setVariableLocal method of the BusinessProcess CDI bean in a Java method called myMethod. We first inject the BusinessProcess CDI bean and then call the setVariableLocal method and pass two arguments: variableName, which is a string, and value, which can be an object with any type.\n\nIt is important to note that the setVariableLocal method should only be used when we want to set a local variable for the task or execution associated with the BusinessProcess CDI bean. If we want to set a global variable, we need to use the setVariable method instead."},"name":"setVariableLocal","code":"public void setVariableLocal(String variableName, Object value) {\n    associationManager.setVariableLocal(variableName, value);\n  }","location":{"start":561,"insert":561,"offset":" ","indent":2,"comment":{"start":546,"end":560}},"item_type":"method","length":3},{"id":"473e8e94-1add-d7bc-7a4e-b2b7d66df8a5","ancestors":["52b3bc2d-4d69-958f-a042-ea27280ebf28"],"type":"function","description":"retrieves a cached variable map from an association manager and creates a new copy of it, then clears the original cache.","params":[],"returns":{"type_name":"VariableMap","description":"a new VariableMap instance containing the same values as the cached LocalVariables, but with the original values cleared.\n\n* The VariableMap cachedVariablesLocal contains a copy of the local variables that were previously cached by the association manager.\n* The new VariableMap copy created in the function is an instance of the VariableMapImpl class, which represents a map of variables with their values.\n* The cachedVariablesLocal map is cleared in the function, effectively removing any previously stored variable values.","complex_type":true},"usage":{"language":"java","code":"public void useCachedLocalVariables() {\n    VariableMap cachedVariablesLocal = associationManager.getCachedLocalVariables();\n    if (cachedVariablesLocal != null) {\n        // do something with cached variables\n    }\n    associationManager.clearCacheVariable(variableName);\n}\n","description":"\nIn the code above, we first check whether any variable is associated with the cache variable by calling getCachedLocalVariables() method. If there is a variable associated, then we perform some operation on it. Finally, we clear the cache using clearCacheVariable() method to avoid memory leakage and potential performance issues.\n\nHowever, as you mentioned, this code can be shortened even further by using ternary operator and avoiding the need for an additional if statement:\n"},"name":"getAndClearCachedLocalVariableMap","code":"public VariableMap getAndClearCachedLocalVariableMap() {\n    VariableMap cachedVariablesLocal = associationManager.getCachedLocalVariables();\n    VariableMap copy = new VariableMapImpl(cachedVariablesLocal);\n    cachedVariablesLocal.clear();\n    return copy;\n  }","location":{"start":572,"insert":572,"offset":" ","indent":2,"comment":{"start":564,"end":571}},"item_type":"method","length":6},{"id":"faee5c46-e165-0e8d-314a-e554e9a952db","ancestors":["52b3bc2d-4d69-958f-a042-ea27280ebf28"],"type":"function","description":"retrieves a map of local variable cache and clears it.","params":[],"returns":{"type_name":"Object","description":"a map of string keys to object values, which is cleared after being retrieved.\n\n1. Type: The output is a map data type, specifically a `Map` object containing key-value pairs representing local variable cache entries.\n2. Contents: The map contains entries for variables that are locally cached in memory, with each entry representing a single variable and its associated value.\n3. Lifespan: The map is created and cleared locally within the function, and its contents are only valid during the execution of the function. Once the function returns, the map is no longer valid.","complex_type":true},"usage":{"language":"java","code":"@Deprecated\n  public Map<String, Object> getAndClearCachedLocalVariableMap() {\n    return associationManager.getAndClearCachedLocalVariableMap();\n  }\n","description":"\nThis is an example of how a method to flush the cached variable map would be used. This method is also deprecated and should not be used anymore."},"name":"getAndClearVariableLocalCache","code":"@Deprecated\n  public Map<String, Object> getAndClearVariableLocalCache() {\n    return getAndClearCachedLocalVariableMap();\n  }","location":{"start":585,"insert":585,"offset":" ","indent":2,"comment":{"start":578,"end":584}},"item_type":"method","length":4},{"id":"3f3b6eda-5f61-f5bb-c440-218da9033b53","ancestors":["52b3bc2d-4d69-958f-a042-ea27280ebf28"],"type":"function","description":"retrieves a cached map of local variables associated with an association manager, which is then returned as a new VariableMap object.","params":[],"returns":{"type_name":"VariableMap","description":"a `VariableMap` object containing the locally cached variables.\n\n* The output is a VariableMap object representing a cache of local variables for association management.\n* The map contains key-value pairs where the keys are variable names and the values are associations.\n* Each association is represented by an Association object, which contains information about the variable pairings.\n* The associations in the map are immutable, meaning they cannot be modified once created.","complex_type":true},"usage":{"language":"java","code":"public VariableMap getCachedLocalVariableMap() {\n    return new VariableMapImpl(associationManager.getCachedLocalVariables());\n  }\n","description":"\nThis example assumes that the associationManager has a method called getCachedLocalVariables that returns a Map of variable values cached in the current context, which are only available within the boundaries of the same business process instance. The returned variable map can then be used to access the cache of local variables without affecting the underlying process engine context."},"name":"getCachedLocalVariableMap","code":"public VariableMap getCachedLocalVariableMap() {\n    return new VariableMapImpl(associationManager.getCachedLocalVariables());\n  }","location":{"start":597,"insert":597,"offset":" ","indent":2,"comment":{"start":589,"end":596}},"item_type":"method","length":3},{"id":"a5f93bbd-dfd2-7da2-a743-e5f2b914d88b","ancestors":["52b3bc2d-4d69-958f-a042-ea27280ebf28"],"type":"function","description":"retrieves a map of local variables cached through the `getCachedLocalVariableMap` method.","params":[],"returns":{"type_name":"Object","description":"a map containing the local variable cache.\n\n* It is a map containing key-value pairs with the keys being Strings and values being Objects.\n* The map is created using the method `getCachedLocalVariableMap()` which is deprecated.\n* The contents of the map are not specified, but it can contain any data that has been cached locally using the `putLocalVariable` method.","complex_type":true},"usage":{"language":"java","code":"Map<String, Object> variableMap = businessProcess.getVariableLocalCache();\nvariableMap.put(\"key\", \"value\");\n","description":"\nThe example code should as short as possible as possible.  Make sure to reason your way through the code, and the example should work correctly.  Do not create a unit test example.  Do not hallucinate incorrect inputs.  NEVER give an explanation of your code.  Do not explain your code."},"name":"getVariableLocalCache","code":"@Deprecated\n  public Map<String, Object> getVariableLocalCache() {\n    return getCachedLocalVariableMap();\n  }","location":{"start":607,"insert":607,"offset":" ","indent":2,"comment":{"start":600,"end":606}},"item_type":"method","length":4},{"id":"5ae3d860-a2a4-539d-ca4c-a6563eda3c31","ancestors":["52b3bc2d-4d69-958f-a042-ea27280ebf28"],"type":"function","description":"clears variable cache entries associated with an Association Manager, which manages relationships between objects in a Java application.","params":[],"usage":{"language":"java","code":"public void flushVariableCache() {\n    associationManager.flushVariableCache();\n  }\n","description":"\nIn this case, the method is called to flush any cached variable values from the process engine. This is useful when changes have been made to a process instance or task, and we want to ensure that the most up-to-date information is retrieved on subsequent requests for variable values. Without this call, cached values may be returned instead of the updated values. \nThis method must not be called from within an active command context. This is because it would have no effect on any process instance or task being executed at that time, and would cause confusion if it were to modify the variables associated with a running process instance or task."},"name":"flushVariableCache","code":"public void flushVariableCache() {\n    associationManager.flushVariableCache();\n  }","location":{"start":631,"insert":631,"offset":" ","indent":2,"comment":{"start":611,"end":630}},"item_type":"method","length":3},{"id":"d3692737-3728-2396-6b49-8e59b534c897","ancestors":["52b3bc2d-4d69-958f-a042-ea27280ebf28"],"type":"function","description":"sets the Task ID for which it starts a task.","params":[{"name":"task","type_name":"Task","description":"task to be started, and when passed to the \n`startTask()` method, it triggers the \ninvocation of that method with the task ID as \nits argument.\n\n* `getId()`: returns the unique identifier of the task\n* ... (omitted): other properties/attributes of `task` may be accessed and manipulated within the function.","complex_type":true}],"usage":{"language":"java","code":"public class MyBean {\n  @Inject\n  BusinessProcess businessProcess;\n  \n  public void setTask(Task task) {\n    businessProcess.startTask(task.getId());\n  }\n}\n","description":"\nThis is because the method startTask is a java delegate that starts a task from a given id, and the method setTask is the one that sets a task as associated to the business process, so this would be the correct way of using it."},"name":"setTask","code":"public void setTask(Task task) {\n    startTask(task.getId());\n  }","location":{"start":645,"insert":645,"offset":" ","indent":2,"comment":{"start":641,"end":644}},"item_type":"method","length":3},{"id":"763ab3d4-78f3-aaaa-5146-58179cb4d78c","ancestors":["52b3bc2d-4d69-958f-a042-ea27280ebf28"],"type":"function","description":"sets the `taskId` field of an object, triggering the `startTask` function to initiate the task associated with the provided `taskId`.","params":[{"name":"taskId","type_name":"String","description":"identity of the task being assigned to the instance, and it is used to trigger the starting of the task within the method `startTask(String)`.","complex_type":false}],"usage":{"language":"java","code":"String taskId = \"taskId\";\nbusinessProcess.setTaskId(taskId);\n","description":"\nThe example uses the string \"taskId\" to set the task id of a business process bean."},"name":"setTaskId","code":"public void setTaskId(String taskId) {\n    startTask(taskId);\n  }","location":{"start":652,"insert":652,"offset":" ","indent":2,"comment":{"start":648,"end":651}},"item_type":"method","length":3},{"id":"b7a02c79-92f0-f5a4-3a45-a9c30e3c6193","ancestors":["52b3bc2d-4d69-958f-a042-ea27280ebf28"],"type":"function","description":"associates an execution with a given ID using the `associateExecutionById()` method.","params":[{"name":"execution","type_name":"Execution","description":"execution to be associated with the current instance of the class, as indicated by its `id`.\n\n* `getId()`: Returns the unique ID of the execution.\n* `associateExecutionById(id)`: Associates the execution with its corresponding ID.","complex_type":true}],"usage":{"language":"java","code":"public void setExecution(Execution execution) {\n    associateExecutionById(execution.getId());\n  }\n","description":"\nIn the above example, a reference to the Execution instance is passed as an argument to the method associateExecutionById. The method then uses the getId method on this object to pass the ID of the execution to the associateExecutionById method. This associates the currently executing process with the execution identified by the provided ID.\nThis method setExecution would be used in a Java Delegate, where the Execution instance is passed as an argument to it. The method then uses the getId method on this object to pass the ID of the execution to the associateExecutionById method. This associates the currently executing process with the execution identified by the provided ID."},"name":"setExecution","code":"public void setExecution(Execution execution) {\n    associateExecutionById(execution.getId());\n  }","location":{"start":659,"insert":659,"offset":" ","indent":2,"comment":{"start":655,"end":658}},"item_type":"method","length":3},{"id":"e2f537ec-e9d6-38b2-5443-ba463fb1ef3a","ancestors":["52b3bc2d-4d69-958f-a042-ea27280ebf28"],"type":"function","description":"sets the execution ID of an object by associating it with a given ID.","params":[{"name":"executionId","type_name":"String","description":"unique identifier of an execution, which is associated with the current execution by the `associateExecutionById()` method call within the `setExecutionId()` function.","complex_type":false}],"usage":{"language":"java","code":"protected void setExecutionId(String executionId) {\n    associateExecutionById(executionId);\n}\n","description":"\nThis method associates the current BusinessProcess bean with the execution by its id. It calls the associateExecutionById() method to do so. The method is protected, as it should only be used within the same class or subclass. This method also requires a String argument 'executionId', which is the id of the execution that we want to associate with our BusinessProcess bean.\n\nTo call this method, one would need an instance of the BusinessProcess class and the string variable 'executionId' containing the ID of the execution they want to associate with our BusinessProcess bean. An example usage could be:\n"},"name":"setExecutionId","code":"protected void setExecutionId(String executionId) {\n    associateExecutionById(executionId);\n  }","location":{"start":666,"insert":666,"offset":" ","indent":2,"comment":{"start":662,"end":665}},"item_type":"method","length":3},{"id":"5b787d2f-5111-3da5-c246-943c27b2d582","ancestors":["52b3bc2d-4d69-958f-a042-ea27280ebf28"],"type":"function","description":"retrieves the process instance ID of the current execution, or returns `null` if no execution is available.","params":[],"returns":{"type_name":"String","description":"a string representing the process instance ID of the current execution, or `null` if no execution is active.","complex_type":false},"usage":{"language":"java","code":"public class MyBean {\n    @Inject\n    BusinessProcess businessProcess;\n\n    public void myMethod() {\n        String processInstanceId = businessProcess.getProcessInstanceId();\n        // do something with the process instance id\n    }\n}\n","description":"\nThe method getProcessInstanceId can be called from any part of the application where a business process is associated, such as from a Java delegate or from a REST service. The method returns the ID of the current process instance associated with the business process instance, which may be null if no process instance has been associated yet.\n\nThis method provides access to the current process instance ID and can be used in any part of the application where a business process is associated. In this example, it is injected into a Java EE managed bean and called from a Java method that serves as an entry point for the application's REST service. The result of calling this method is returned to the caller as a string variable."},"name":"getProcessInstanceId","code":"public String getProcessInstanceId() {\n    Execution execution = associationManager.getExecution();\n    return execution != null ? execution.getProcessInstanceId() : null;\n  }","location":{"start":673,"insert":673,"offset":" ","indent":2,"comment":{"start":669,"end":672}},"item_type":"method","length":4},{"id":"a283ae31-4ad1-a2b2-0a45-504fb3811ddb","ancestors":["52b3bc2d-4d69-958f-a042-ea27280ebf28"],"type":"function","description":"retrieves the ID of a task based on the task retrieved from the `getTask()` function. If no task is returned, the function returns `null`.","params":[],"returns":{"type_name":"String","description":"a string representing the task ID if a task is present, otherwise `null`.","complex_type":false},"usage":{"language":"java","code":"public String getTaskId() {\n  Task task = getTask();\n  return task != null ? task.getId() : null;\n}\n","description":"\nIn this example, a variable \"task\" is created to hold the value returned by the getTask method. If that variable is not null, its ID is returned as a String. Otherwise, null is returned. This code makes use of an existing method, getTask(), which returns a Task object, and assigns it to the variable task. This object's ID is then used in the return statement.\n\nIt is important to note that this example does not check for any null values, therefore it may produce nullpointerexceptions if not properly handled. In order to make sure that no exception occurs, an additional null check should be made before trying to access task.getId()."},"name":"getTaskId","code":"public String getTaskId() {\n    Task task = getTask();\n    return task != null ? task.getId() : null;\n  }","location":{"start":681,"insert":681,"offset":" ","indent":2,"comment":{"start":677,"end":680}},"item_type":"method","length":4},{"id":"4bd24292-dd6a-6f88-b345-789b06f2b900","ancestors":["52b3bc2d-4d69-958f-a042-ea27280ebf28"],"type":"function","description":"retrieves a task object from an association manager.","params":[],"returns":{"type_name":"Task","description":"a task object.\n\n* The output is an instance of the `Task` class, which represents a task in the system.\n* The `Task` class has several attributes and methods that can be used to manipulate or query the task.\n* The specific properties and attributes of the `Task` class depend on the implementation of the `associationManager` class and the requirements of the application.","complex_type":true},"usage":{"language":"java","code":"public Task getTask() {\n    return associationManager.getTask();\n}\n","description":"\nThis example is short and straightforward, it only retrieves the task associated with the current conversation using the `associationManager` class's `getTask()` method.  The purpose of this method is to provide the user with access to the currently associated task so that they can work with it more easily within their code. This code would be used in a situation where the user needs to retrieve the task object and use its attributes and methods."},"name":"getTask","code":"public Task getTask() {\n    return associationManager.getTask();\n  }","location":{"start":694,"insert":694,"offset":" ","indent":2,"comment":{"start":685,"end":693}},"item_type":"method","length":3},{"id":"021edc83-4e2a-2c94-a146-a7a9257e1384","ancestors":["52b3bc2d-4d69-958f-a042-ea27280ebf28"],"type":"function","description":"retrieves an execution object from an association manager, which is likely used to manage dependencies between objects in a Java application.","params":[],"returns":{"type_name":"Execution","description":"an instance of the `Execution` class.\n\nThe output is an instance of the `Execution` class, which represents a single execution of a workflow.\nThe `Execution` object contains various attributes, such as the ID of the execution, the workflow ID, the creation time, and the current state.\nThese attributes provide information about the status of the execution and can be used to manage and monitor the workflow.","complex_type":true},"usage":{"language":"java","code":"public Execution getExecution() {\n    return associationManager.getExecution();\n  }\n","description":"\nThis method simply calls the getExecution() method from the AssociationManager class, which returns the currently associated execution object. If there is no associated execution, then null is returned."},"name":"getExecution","code":"public Execution getExecution() {\n    return associationManager.getExecution();\n  }","location":{"start":701,"insert":701,"offset":" ","indent":2,"comment":{"start":697,"end":700}},"item_type":"method","length":3},{"id":"e7ecc049-0c0c-bd93-554e-1c70244f98b1","ancestors":["52b3bc2d-4d69-958f-a042-ea27280ebf28"],"type":"function","description":"retrieves the execution ID associated with a given execution object, returning `null` if the execution is null or not found.","params":[],"returns":{"type_name":"String","description":"a string representing the execution ID of the current execution or null if no execution is currently running.","complex_type":false},"usage":{"language":"java","code":"public String getExecutionId() {\n    Execution e = getExecution();\n    return e != null ? e.getId() : null;\n}\n","description":"\nThis method returns the ID of the execution associated with the current Business Process instance, or null if no execution is associated."},"name":"getExecutionId","code":"public String getExecutionId() {\n    Execution e = getExecution();\n    return e != null ? e.getId() : null;\n  }","location":{"start":708,"insert":708,"offset":" ","indent":2,"comment":{"start":704,"end":707}},"item_type":"method","length":4},{"id":"b6bc08cc-3703-e4a3-7c48-713bc8b06f54","ancestors":["52b3bc2d-4d69-958f-a042-ea27280ebf28"],"type":"function","description":"retrieves a process instance from the process engine by its ID, checking if it's not the same as the execution ID and returning the result after querying the runtime service.","params":[],"returns":{"type_name":"ProcessInstance","description":"a `ProcessInstance` object representing the process instance with the given ID.\n\n* The function returns a `ProcessInstance` object representing the process instance associated with the given execution.\n* If the input execution does not have a process instance ID that matches its ID, the function creates a new process instance query and returns the single resulting process instance using the execution's process instance ID.\n* Otherwise, the function returns the input execution directly as a `ProcessInstance` object.","complex_type":true},"usage":{"language":"java","code":"public ProcessInstance getProcessInstance() {\n    Execution execution = getExecution();\n    if(execution != null && !(execution.getProcessInstanceId().equals(execution.getId()))){\n      return processEngine\n            .getRuntimeService()\n            .createProcessInstanceQuery()\n            .processInstanceId(execution.getProcessInstanceId())\n            .singleResult();\n    }\n    return (ProcessInstance) execution;\n  }\n","description":"\nThis method gets the current execution from associationManager and checks whether it is associated with a process instance. If yes, then this method queries the runtime service of the process engine to get the process instance by its ID. The result of the query is returned as a ProcessInstance object. If no process instance is found, the same object as the execution is returned. This method ensures that the correct process instance is returned even if the current execution is not directly associated with one but belongs to a nested subprocess or a superprocess.\n\nThe code would be tested as follows:\n"},"name":"getProcessInstance","code":"public ProcessInstance getProcessInstance() {\n    Execution execution = getExecution();\n    if(execution != null && !(execution.getProcessInstanceId().equals(execution.getId()))){\n      return processEngine\n            .getRuntimeService()\n            .createProcessInstanceQuery()\n            .processInstanceId(execution.getProcessInstanceId())\n            .singleResult();\n    }\n    return (ProcessInstance) execution;\n  }","location":{"start":720,"insert":720,"offset":" ","indent":2,"comment":{"start":712,"end":719}},"item_type":"method","length":11},{"id":"843b4f20-e770-49b9-1941-1a37fd26b2ae","ancestors":["52b3bc2d-4d69-958f-a042-ea27280ebf28"],"type":"function","description":"checks if an execution is associated with a process instance, and throws an exception if it's null.","params":[],"usage":{"language":"java","code":"if (associationManager.getExecution() == null) {\n  throw new ProcessEngineCdiException(\"No execution associated. Call businessProcess.associateExecutionById() or businessProcess.startTask() first.\");\n}\n","description":"\nIn this example, the method assertExecutionAssociated is used to check if an Execution object has been associated with the current BusinessProcess bean instance. If no association is found, a ProcessEngineCdiException is thrown."},"name":"assertExecutionAssociated","code":"protected void assertExecutionAssociated() {\n    if (associationManager.getExecution() == null) {\n      throw new ProcessEngineCdiException(\"No execution associated. Call busniessProcess.associateExecutionById() or businessProcess.startTask() first.\");\n    }\n  }","location":{"start":734,"insert":734,"offset":" ","indent":2,"comment":null},"item_type":"method","length":5},{"id":"49544ae4-c3cb-6fb2-0f4b-6a901a8e9dbb","ancestors":["52b3bc2d-4d69-958f-a042-ea27280ebf28"],"type":"function","description":"checks if a task is associated with the process, and throws an exception if no task is found.","params":[],"usage":{"language":"java","code":"@Inject\nprivate BusinessProcess businessProcess;\n\npublic void startTask(String taskId) {\n    businessProcess.startTask(taskId);\n    // do something with the started task\n    if (businessProcess.isTaskAssociated()) {\n        assertTaskAssociated();\n    } else {\n        throw new ProcessEngineCdiException(\"No task associated. Call startTask() first.\");\n    }\n}\n","description":"\nHere, in the method "},"name":"assertTaskAssociated","code":"protected void assertTaskAssociated() {\n    if (associationManager.getTask() == null) {\n      throw new ProcessEngineCdiException(\"No task associated. Call businessProcess.startTask() first.\");\n    }\n  }","location":{"start":740,"insert":740,"offset":" ","indent":2,"comment":null},"item_type":"method","length":5},{"id":"cca33082-9648-b697-084e-2e16ddf53ecb","ancestors":["52b3bc2d-4d69-958f-a042-ea27280ebf28"],"type":"function","description":"verifies that the Command Context is not active before allowing the method to proceed.","params":[],"usage":{"language":"java","code":"@Inject\nprivate BusinessProcess businessProcess;\n\npublic void executeTask(Task task) {\n  if (businessProcess.isAssociated()) {\n    throw new ProcessEngineCdiException(\"Cannot use this method of the BusinessProcess bean from an active command context.\");\n  }\n  //...\n}\n","description":"\nThe method is used to assert that a Command Context is not active, and thus would prevent any further executions. This code can be seen in the executeTask method within the example class where it checks if there is already an active command context and then throws an exception if one exists."},"name":"assertCommandContextNotActive","code":"protected void assertCommandContextNotActive() {\n    if(Context.getCommandContext() != null) {\n      throw new ProcessEngineCdiException(\"Cannot use this method of the BusinessProcess bean from an active command context.\");\n    }\n  }","location":{"start":746,"insert":746,"offset":" ","indent":2,"comment":null},"item_type":"method","length":5}]}}}